/*
 *  Copyright (c) 2000-2002, Shayne R Flint
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *
 *  3. The name of the author may not be used to endorse or promote products
 *  derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
package armidale.test;

import armidale.api.Application;
import armidale.api.ClassInformation;
import armidale.api.ProductInfo;
import armidale.api.context.*;
import armidale.api.context.clientserver.*;
import armidale.api.context.platform.*;

import armidale.api.gui.*;
import armidale.api.gui.constants.*;
import armidale.api.io.Debug;
import armidale.api.io.File;

import java.io.IOException;

// This is a simple armidale application which will open a small frame
// with an image and button on it. A callback is defined to display
// a message on the server when the button is clicked.
//
// Because this is an armidale application, it can be run stand-alone or
// over a network using the armidale launcher.
//
  

// All armidale applications must extend armidale.api.Application or an
// extension of it.
//
public class SimpleApp extends Application {  


  public void init() {

    // This is where the main work is done. The init() method is declared
    // in armidale.api.Application and is called as part of the application
    // execution (see the armidale.api.Application.run() method).
    //
    
    // We start by creating a frame using the armidale.api.gui.FrameFactory.
    // This factory creates implementations of the armidale.api.gui.Frame
    // interface based on the specified context (usually server or local
    // swing). The context parameter used below is declared in
    // armidale.api.Application (our parent class) and is set by the
    // environment starting the application. In the standalone case this 
    // is set in a main method like the one defined later in this class. 
    // In the case of a server environment, it is set by the armidale server
    // in response to a connection request from a client.
    //
    // The main point here is that the application developer doesn't have to
    // worry about what context is set to. He just passes it as a parameter
    // the the various factories and other API methods.
    //
    Frame frame = FrameFactory.create(context);

    
    // Armidale handles events using a callback mechanism. When an event is
    // generated by a widget (eg. a user clicks a button) a specific method
    // of each associated callback object is called. For example, when a Frame
    // is closed, a frame close event is generated. This event results in a 
    // call to the windowClosing() method of each associate WindowCallback
    // object.
    //
    // In the following statement we add a callback to the frame to handle 
    // window close events (ie. when the user clicks the close icon at the top
    // of the window). As a convenience, armidale includes a simple class 
    // (armidale.api.gui.WindowCloseCallback) that implements various options
    // regarding the closing of frames. Here we have chosen to stop the 
    // application when the user closes the frame.
    //    
    frame.addWindowCallback
      ( new WindowCloseCallback
              (context, WindowCloseCallback.STOP_APPLICATION_ON_CLOSE));
    
    
    // Complete the initialization of the frame by setting its title, size etc.
    //
    frame.setTitle("Simple Application");
    frame.setSize(new Size(420, 300));
    frame.setAlignment(Frame.CENTER);
    frame.setResizable(false);

    
    // The image and button will be displayed on a BorderPanel. Create the
    // main panel and set its background color. Note that the Color class here
    // is an armidale.api.gui.Color, not a java.awt.Color
    //
    BorderPanel  mainPanel    = BorderPanelFactory.create(context);
    mainPanel.setBackgroundColor(Color.WHITE);

    
    // Create the image and set the image data to the contents of a specified
    // file.
    //
    // By using the setFile() method to set the image data, this application, 
    // when run on a server, will ask the client to try and load the image
    // from the client filesystem. If the image is not available on the client,
    // it will downloaded from the server.
    //
    Image        image        = ImageFactory.create(context);
    image.setFile(new File("images/armidaledemo.png"));

    
    // Create a label, based on the above image and set its alignment
    //
    Label        label        = LabelFactory.create(context);
    label.setImage(image);
    label.setAlignment(Label.CENTER);
    label.setText(
        "<html><body><center>"
      + "<font color=\"black\">Thank you for using <font color=\"purple\">armidale</font>.<br><br>"
      + "If you have any comments, suggestions or problems, please "
      + "email the author at <font color=\"blue\">shayne@cs.anu.edu.au</font> or register "
      + "a comment at <font color=\"blue\">http://sourceforge.net/projects/armidale.</font></font></center></body></html>"
      );
    label.setTextPosition(Label.NORTH);

    
    // Add the label created above to the main panel. To add a widget to a 
    // border panel, it needs to be wrapped up in a BorderPanelWidget along 
    // with its position (constraints) on the border panel (ie. north, south,
    // east, west or center). Note that this pattern is used for many of the 
    // armidale panels (eg. GridPanel and GridPanelWidget).
    //
    mainPanel.addWidget
      ( BorderPanelWidgetFactory.create
          (context, label, BorderPanelWidget.CENTER));

    
    // Following the same pattern of widget creation, we now create a button
    // and set some its properties
    //
    PushButton   testButton   = PushButtonFactory.create(context);
    testButton.setText("Test Events");
    testButton.setPreferredSize(new Size(150, 25));

    
    // For convenience, armidale provides a Debug implementation of all 
    // callback classes. These Debug classes print details of events generated
    // by associated widgets.
    //
    // In the following code we add to the button a pre-built
    // ActionCallbackDebug object which displays a debug message when the
    // button is pressed.
    //
    testButton.addActionCallback(new ActionCallbackDebug(context));

    
    // We are now going to create a FlowPanel on which to place the Button.
    // This panel will, in turn, be placed on the main border panel created
    // above.
    //
    FlowPanel    buttonPanel  = FlowPanelFactory.create(context);
    buttonPanel.setBackgroundColor(Color.WHITE);
    buttonPanel.setHorizontalGap(6);
    buttonPanel.setVerticalGap(6);
    
    
    // Now add the button to the FlowPanel. There are no constraints applicable
    // to widgets placed on a flow panel, so we don't use a special wrapper
    // class like the BorderPanelWidget used above.
    //
    buttonPanel.addWidget(testButton);

    
    // Now add the button panel to the south of the main border panel.
    //
    mainPanel.addWidget
      ( BorderPanelWidgetFactory.create
          (context, buttonPanel, BorderPanelWidget.SOUTH));
    
    
    // Next, we need to add the main panel (with its image and flow panel 
    // containing the button) to the frame. Frames have a tool bar, status
    // bar and content area, each of which contain a single widget. Here we
    // use setContent() to set the content of the frame to the main panel we
    // created above.
    //
    frame.setContent(mainPanel);
    
    // And finaly, we make the frame visible.
    //
    frame.show();
  }

  
  
  // A main method is required if you want to be able to run an application
  // stand-alone without using the armidale.api.LocalApplication class. 
  // The pattern of this main is fairly common in Java applications, 
  // in that it creates an instance of the enclosing class. In the case of 
  // armidale, it must also set the context in which to run the application.
  // To run the application locally, we need to use the SwingContext which
  // will cause the various widget factories to create objects that are 
  // implemented using swing. These object will therefore be displayed on the
  // local computer.
  //
  public static void main(String[] args) {
    
    // create an instance of SimpleApp
    //
    SimpleApp  app  = new SimpleApp();
    
    // set the apps context to an instance of SwingContext. 
    //
    app.setContext(new SwingContext());
    
    // the application is now ready to go. So start it.
    //
    app.start();
  }

}

