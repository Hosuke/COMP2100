/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/Slider.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:04
 *
 */

package armidale.api.gui;
  /**
   *
   * @author  generated by <tt>armidale.utilities.makeclass.Main</tt> on 10Apr2002 at 17:58:04
   * @version armidale v0.9.5
   */

  import armidale.api.gui.constants.Orientation;

public interface Slider extends Widget, Orientation {

  // Attributes Defaults
  //
  public static final int DEFAULT_MINIMUM = 0;
  public static final int DEFAULT_MAXIMUM = 100;
  public static final int DEFAULT_VALUE = 50;
  public static final int DEFAULT_ORIENTATION = HORIZONTAL;
  public static final int DEFAULT_MAJORTICKSPACING = 10;
  public static final int DEFAULT_MINORTICKSPACING = 2;
  public static final boolean DEFAULT_TICKSVISIBLE = true;
  public static final boolean DEFAULT_LABELSVISIBLE = true;
  public static final boolean DEFAULT_SNAPTOTICKS = false;

  // attribute set/get/is methods
  //

  /**
   * Returns the value of the <tt>minimum</tt> attribute.
   * <p>
   *
   * @return value of the <tt>minimum</tt> attribute
   */
  public int getMinimum();

  /**
   * Sets the <tt>minimum</tt> attribute.
   * <p>
   *
   * @param  minimum value of the <tt>minimum</tt> attribute. 
   */
  public void setMinimum(int minimum);

  /**
   * Returns the value of the <tt>maximum</tt> attribute.
   * <p>
   *
   * @return value of the <tt>maximum</tt> attribute
   */
  public int getMaximum();

  /**
   * Sets the <tt>maximum</tt> attribute.
   * <p>
   *
   * @param  maximum value of the <tt>maximum</tt> attribute. 
   */
  public void setMaximum(int maximum);

  /**
   * Returns the value of the <tt>value</tt> attribute.
   * <p>
   *
   * @return value of the <tt>value</tt> attribute
   */
  public int getValue();

  /**
   * Sets the <tt>value</tt> attribute.
   * <p>
   *
   * @param  value value of the <tt>value</tt> attribute. 
   */
  public void setValue(int value);

  /**
   * Returns the value of the <tt>orientation</tt> attribute.
   * <p>
   *
   * @return value of the <tt>orientation</tt> attribute
   */
  public int getOrientation();

  /**
   * Sets the <tt>orientation</tt> attribute.
   * <p>
   *
   * @param  orientation value of the <tt>orientation</tt> attribute. 
   * Values for this parameter are defined in the {@link armidale.api.gui.constants.Orientation armidale.api.gui.constants.Orientation} interface
   */
  public void setOrientation(int orientation);

  /**
   * Returns the value of the <tt>majorTickSpacing</tt> attribute.
   * <p>
   *
   * @return value of the <tt>majorTickSpacing</tt> attribute
   */
  public int getMajorTickSpacing();

  /**
   * Sets the <tt>majorTickSpacing</tt> attribute.
   * <p>
   *
   * @param  majorTickSpacing value of the <tt>majorTickSpacing</tt> attribute. 
   */
  public void setMajorTickSpacing(int majorTickSpacing);

  /**
   * Returns the value of the <tt>minorTickSpacing</tt> attribute.
   * <p>
   *
   * @return value of the <tt>minorTickSpacing</tt> attribute
   */
  public int getMinorTickSpacing();

  /**
   * Sets the <tt>minorTickSpacing</tt> attribute.
   * <p>
   *
   * @param  minorTickSpacing value of the <tt>minorTickSpacing</tt> attribute. 
   */
  public void setMinorTickSpacing(int minorTickSpacing);

  /**
   * Returns the value of the <tt>ticksVisible</tt> attribute.
   * <p>
   *
   * @return value of the <tt>ticksVisible</tt> attribute
   */
  public boolean ticksVisible();

  /**
   * Sets the <tt>ticksVisible</tt> attribute.
   * <p>
   *
   * @param  ticksVisible value of the <tt>ticksVisible</tt> attribute. 
   */
  public void setTicksVisible(boolean ticksVisible);

  /**
   * Returns the value of the <tt>labelsVisible</tt> attribute.
   * <p>
   *
   * @return value of the <tt>labelsVisible</tt> attribute
   */
  public boolean labelsVisible();

  /**
   * Sets the <tt>labelsVisible</tt> attribute.
   * <p>
   *
   * @param  labelsVisible value of the <tt>labelsVisible</tt> attribute. 
   */
  public void setLabelsVisible(boolean labelsVisible);

  /**
   * Returns the value of the <tt>snapToTicks</tt> attribute.
   * <p>
   *
   * @return value of the <tt>snapToTicks</tt> attribute
   */
  public boolean snapToTicks();

  /**
   * Sets the <tt>snapToTicks</tt> attribute.
   * <p>
   *
   * @param  snapToTicks value of the <tt>snapToTicks</tt> attribute. 
   */
  public void setSnapToTicks(boolean snapToTicks);

  // callback
  //

  /**
   * Registers a callback with this Slider
   *
   * @param  callback callback to be added
   *
   */
  public void addSliderCallback(SliderCallback callback);

  /**
   * Removes a callback registered with this Slider
   *
   * @param  callback callback to be removed
   */
  public void removeSliderCallback(SliderCallback callback);

  /**
   * Removes all callbacks registered with this Slider
   *
   */
  public void removeAllSliderCallbacks();

  /**
   * Returns the list of callbacks registered with this Slider
   *
   * @return list of callbacks registered with this object
   */
  public SliderCallbackList getSliderCallbackList();

  // other methods
  //

  /**
   *
   * @param value
   * @param label
   */
  public void addLabel(int value, String label);

  /**
   *
   * @param spacing
   */
  public void useIntegerLabels(int spacing);
}
