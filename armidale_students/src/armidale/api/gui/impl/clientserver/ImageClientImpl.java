/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/ImageClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:57:42
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.Image;
  import armidale.api.gui.ImageCallback;
  import armidale.api.gui.ImageCallbackList;
  import armidale.api.gui.ImageFactory;
  import armidale.api.gui.Size;
  import armidale.api.impl.clientserver.ArmidaleObjectClientImpl;
  import armidale.api.io.File;
  import armidale.api.structures.ByteArray;

public class ImageClientImpl extends ArmidaleObjectClientImpl implements ImageClientServerIds {

  // constructor
  //
  public ImageClientImpl(ClientContext context, Image peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return ImageFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public void setImageData(ByteArray imageData) {
    ((Image)peer).setImageData(imageData);
  }

  public Size getSize() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setSize(Size size) {
    ((Image)peer).setSize(size);
  }

  public void setFile(File file) {
    ((Image)peer).setFile(file);
  }

  public String getDescription() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setDescription(String description) {
    ((Image)peer).setDescription(description);
  }

  // Callback methods
  //

  public void addImageCallback(ImageCallback callback) {
    ((Image)peer).addImageCallback(callback);
  }

  public void removeImageCallback(ImageCallback callback) {
    ((Image)peer).removeImageCallback(callback);
  }

  public void removeAllImageCallbacks() {
    ((Image)peer).removeAllImageCallbacks();
  }

  public ImageCallbackList getImageCallbackList() {
    throw new ImplementationException("callback get methods are not supported in client context");
  }

  // local callback handlers
  //

  private class LocalCallback implements ImageCallback {

    public void imageChanged(Image image) {
      Message message = new CallbackMessage(ImageClientImpl.this.getId(), imageImageChangedId);
      transport.writeMessage(message);
    }

    public void error(Image image) {
      Message message = new CallbackMessage(ImageClientImpl.this.getId(), imageErrorId);
      transport.writeMessage(message);
    }

    public void getFile(Image image, String filename) {
      Message message = new CallbackMessage(ImageClientImpl.this.getId(), imageGetFileStringId);
      message.writeString(filename);
      transport.writeMessage(message);
    }
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      case imageDataId:
        setImageData(message.readByteArray());
        break;
      case sizeId:
        setSize(message.readSize());
        break;
      case fileId:
        setFile(new File(message.readString()));
        break;
      case descriptionId:
        setDescription(message.readString());
        break;
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }

  public void handleEnableCallbacks() {
    addImageCallback(new LocalCallback());
  }

  public void handleDisableCallbacks() {
    removeAllImageCallbacks();
  }
}
