/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/SliderClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:05
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.Slider;
  import armidale.api.gui.SliderCallback;
  import armidale.api.gui.SliderCallbackList;
  import armidale.api.gui.SliderFactory;
  import armidale.api.gui.constants.Orientation;

public class SliderClientImpl extends WidgetClientImpl implements SliderClientServerIds {

  // constructor
  //
  public SliderClientImpl(ClientContext context, Slider peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return SliderFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public int getMinimum() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setMinimum(int minimum) {
    ((Slider)peer).setMinimum(minimum);
  }

  public int getMaximum() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setMaximum(int maximum) {
    ((Slider)peer).setMaximum(maximum);
  }

  public int getValue() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setValue(int value) {
    ((Slider)peer).setValue(value);
  }

  public int getOrientation() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setOrientation(int orientation) {
    ((Slider)peer).setOrientation(orientation);
  }

  public int getMajorTickSpacing() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setMajorTickSpacing(int majorTickSpacing) {
    ((Slider)peer).setMajorTickSpacing(majorTickSpacing);
  }

  public int getMinorTickSpacing() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setMinorTickSpacing(int minorTickSpacing) {
    ((Slider)peer).setMinorTickSpacing(minorTickSpacing);
  }

  public boolean ticksVisible() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setTicksVisible(boolean ticksVisible) {
    ((Slider)peer).setTicksVisible(ticksVisible);
  }

  public boolean labelsVisible() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setLabelsVisible(boolean labelsVisible) {
    ((Slider)peer).setLabelsVisible(labelsVisible);
  }

  public boolean snapToTicks() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setSnapToTicks(boolean snapToTicks) {
    ((Slider)peer).setSnapToTicks(snapToTicks);
  }

  // Callback methods
  //

  public void addSliderCallback(SliderCallback callback) {
    ((Slider)peer).addSliderCallback(callback);
  }

  public void removeSliderCallback(SliderCallback callback) {
    ((Slider)peer).removeSliderCallback(callback);
  }

  public void removeAllSliderCallbacks() {
    ((Slider)peer).removeAllSliderCallbacks();
  }

  public SliderCallbackList getSliderCallbackList() {
    throw new ImplementationException("callback get methods are not supported in client context");
  }

  // other methods
  //

  public void addLabel(int value, String label) {
    ((Slider)peer).addLabel(value, label);
  }

  public void useIntegerLabels(int spacing) {
    ((Slider)peer).useIntegerLabels(spacing);
  }

  // local callback handlers
  //

  private class LocalCallback implements SliderCallback {

    public void valueAdjusted(Slider slider, int value) {
      Message message = new CallbackMessage(SliderClientImpl.this.getId(), sliderValueAdjustedIntId);
      message.writeInt(value);
      transport.writeMessage(message);
    }
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      case minimumId:
        setMinimum(message.readInt());
        break;
      case maximumId:
        setMaximum(message.readInt());
        break;
      case valueId:
        setValue(message.readInt());
        break;
      case orientationId:
        setOrientation(message.readInt());
        break;
      case majorTickSpacingId:
        setMajorTickSpacing(message.readInt());
        break;
      case minorTickSpacingId:
        setMinorTickSpacing(message.readInt());
        break;
      case ticksVisibleId:
        setTicksVisible(message.readBoolean());
        break;
      case labelsVisibleId:
        setLabelsVisible(message.readBoolean());
        break;
      case snapToTicksId:
        setSnapToTicks(message.readBoolean());
        break;
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }

  public void handleMethodCall(int methodId, Message message) {

    // method parameter values
    //
    int addLabelValue;
    String addLabelLabel;
    int useIntegerLabelsSpacing;

    switch (methodId) {
      case addLabelIntStringId:
        addLabelValue = message.readInt();
        addLabelLabel = message.readString();
        addLabel(addLabelValue, addLabelLabel);
        break;
      case useIntegerLabelsIntId:
        useIntegerLabelsSpacing = message.readInt();
        useIntegerLabels(useIntegerLabelsSpacing);
        break;
      default:
        super.handleMethodCall(methodId, message);
    }
  }

  public void handleEnableCallbacks() {
    addSliderCallback(new LocalCallback());
  }

  public void handleDisableCallbacks() {
    removeAllSliderCallbacks();
  }
}
