/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/SplitPanelServerImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:19
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.context.clientserver.*;
  import armidale.api.gui.SplitPanelFactory;
  import armidale.api.gui.Widget;
  import armidale.api.gui.constants.Orientation;
  import java.io.IOException;

public class SplitPanelServerImpl extends WidgetServerImpl implements SplitPanelClientServerIds {

  // readable attributes
  //
  protected int orientation = DEFAULT_ORIENTATION;
  protected float dividerLocation = DEFAULT_DIVIDERLOCATION;
  protected int dividerSize = DEFAULT_DIVIDERSIZE;
  protected float resizeWeight = DEFAULT_RESIZEWEIGHT;
  protected boolean expandable = DEFAULT_EXPANDABLE;
  protected Widget leftWidget;
  protected Widget rightWidget;

  // constructor
  //
  public SplitPanelServerImpl(ServerContext context) {
    super(context);
  }

  // Class ID
  //
  public int getClassId() {
    return SplitPanelFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public int getOrientation() {
    return orientation;
  }

  public void setOrientation(int orientation) {
    this.orientation = orientation;
    Message msg = new SetAttributeMessage(this.getId(), orientationId);
    msg.writeInt(orientation);
    transport.writeMessage(msg);
  }

  public float getDividerLocation() {
    return dividerLocation;
  }

  public void setDividerLocation(float dividerLocation) {
    this.dividerLocation = dividerLocation;
    Message msg = new SetAttributeMessage(this.getId(), dividerLocationId);
    msg.writeFloat(dividerLocation);
    transport.writeMessage(msg);
  }

  public int getDividerSize() {
    return dividerSize;
  }

  public void setDividerSize(int dividerSize) {
    this.dividerSize = dividerSize;
    Message msg = new SetAttributeMessage(this.getId(), dividerSizeId);
    msg.writeInt(dividerSize);
    transport.writeMessage(msg);
  }

  public float getResizeWeight() {
    return resizeWeight;
  }

  public void setResizeWeight(float resizeWeight) {
    this.resizeWeight = resizeWeight;
    Message msg = new SetAttributeMessage(this.getId(), resizeWeightId);
    msg.writeFloat(resizeWeight);
    transport.writeMessage(msg);
  }

  public boolean isExpandable() {
    return expandable;
  }

  public void setExpandable(boolean expandable) {
    this.expandable = expandable;
    Message msg = new SetAttributeMessage(this.getId(), expandableId);
    msg.writeBoolean(expandable);
    transport.writeMessage(msg);
  }

  public Widget getLeftWidget() {
    return leftWidget;
  }

  public void setLeftWidget(Widget leftWidget) {
    this.leftWidget = leftWidget;
    Message msg = new SetAttributeMessage(this.getId(), leftWidgetId);
    msg.writeObjectId((MessagingObject)leftWidget);
    transport.writeMessage(msg);
  }

  public Widget getTopWidget() {
    return getLeftWidget();
  }

  public void setTopWidget(Widget leftWidget) {
    setLeftWidget(leftWidget);
  }

  public Widget getRightWidget() {
    return rightWidget;
  }

  public void setRightWidget(Widget rightWidget) {
    this.rightWidget = rightWidget;
    Message msg = new SetAttributeMessage(this.getId(), rightWidgetId);
    msg.writeObjectId((MessagingObject)rightWidget);
    transport.writeMessage(msg);
  }

  public Widget getBottomWidget() {
    return getRightWidget();
  }

  public void setBottomWidget(Widget rightWidget) {
    setRightWidget(rightWidget);
  }

}
