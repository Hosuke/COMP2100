/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/BoxPanelClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:08
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.BoxPanel;
  import armidale.api.gui.BoxPanelFactory;
  import armidale.api.gui.Size;
  import armidale.api.gui.Widget;
  import armidale.api.gui.constants.Orientation;

public class BoxPanelClientImpl extends PanelClientImpl implements BoxPanelClientServerIds {

  // constructor
  //
  public BoxPanelClientImpl(ClientContext context, BoxPanel peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return BoxPanelFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public int getOrientation() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setOrientation(int orientation) {
    ((BoxPanel)peer).setOrientation(orientation);
  }

  // other methods
  //

  public void addHorizontalSpring() {
    ((BoxPanel)peer).addHorizontalSpring();
  }

  public void addHorizontalStrut(int width) {
    ((BoxPanel)peer).addHorizontalStrut(width);
  }

  public void addVerticalSpring() {
    ((BoxPanel)peer).addVerticalSpring();
  }

  public void addVerticalStrut(int height) {
    ((BoxPanel)peer).addVerticalStrut(height);
  }

  public void addRigidArea(Size size) {
    ((BoxPanel)peer).addRigidArea(size);
  }

  public void addWidget(Widget widget) {
    Widget widgetPeer;
    if (widget==null) {
     widgetPeer = null;
    } else {
     widgetPeer = (Widget)((WidgetClientImpl)widget).peer;
    }
    ((BoxPanel)peer).addWidget(widgetPeer);
  }

  public void removeWidget(Widget widget) {
    Widget widgetPeer;
    if (widget==null) {
     widgetPeer = null;
    } else {
     widgetPeer = (Widget)((WidgetClientImpl)widget).peer;
    }
    ((BoxPanel)peer).removeWidget(widgetPeer);
  }

  public void removeAllWidgets() {
    ((BoxPanel)peer).removeAllWidgets();
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      case orientationId:
        setOrientation(message.readInt());
        break;
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }

  public void handleMethodCall(int methodId, Message message) {

    // method parameter values
    //
    int addHorizontalStrutWidth;
    int addVerticalStrutHeight;
    Size addRigidAreaSize;
    Widget addWidgetWidget;
    Widget removeWidgetWidget;

    switch (methodId) {
      case addHorizontalSpringId:
        addHorizontalSpring();
        break;
      case addHorizontalStrutIntId:
        addHorizontalStrutWidth = message.readInt();
        addHorizontalStrut(addHorizontalStrutWidth);
        break;
      case addVerticalSpringId:
        addVerticalSpring();
        break;
      case addVerticalStrutIntId:
        addVerticalStrutHeight = message.readInt();
        addVerticalStrut(addVerticalStrutHeight);
        break;
      case addRigidAreaSizeId:
        addRigidAreaSize = message.readSize();
        addRigidArea(addRigidAreaSize);
        break;
      case addWidgetWidgetId:
        addWidgetWidget = (Widget)objectRegistry.findObject(message.readObjectId());
        addWidget(addWidgetWidget);
        break;
      case removeWidgetWidgetId:
        removeWidgetWidget = (Widget)objectRegistry.findObject(message.readObjectId());
        removeWidget(removeWidgetWidget);
        break;
      case removeAllWidgetsId:
        removeAllWidgets();
        break;
      default:
        super.handleMethodCall(methodId, message);
    }
  }
}
