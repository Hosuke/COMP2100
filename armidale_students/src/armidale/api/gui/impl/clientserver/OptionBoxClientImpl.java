/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/OptionBoxClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:35
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.Desktop;
  import armidale.api.gui.Image;
  import armidale.api.gui.OptionBox;
  import armidale.api.gui.OptionBoxCallback;
  import armidale.api.gui.OptionBoxCallbackList;
  import armidale.api.gui.OptionBoxFactory;
  import armidale.api.gui.constants.OptionBoxButton;
  import armidale.api.gui.constants.OptionBoxButtonSet;
  import armidale.api.gui.constants.OptionBoxMessageType;
  import armidale.api.impl.clientserver.ArmidaleObjectClientImpl;

public class OptionBoxClientImpl extends ArmidaleObjectClientImpl implements OptionBoxClientServerIds {

  // constructor
  //
  public OptionBoxClientImpl(ClientContext context, OptionBox peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return OptionBoxFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public String getTitle() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setTitle(String title) {
    ((OptionBox)peer).setTitle(title);
  }

  public String getMessage() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setMessage(String message) {
    ((OptionBox)peer).setMessage(message);
  }

  public int getMessageType() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setMessageType(int messageType) {
    ((OptionBox)peer).setMessageType(messageType);
  }

  public int getButtonSet() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setButtonSet(int buttonSet) {
    ((OptionBox)peer).setButtonSet(buttonSet);
  }

  public Image getIcon() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setIcon(Image icon) {
    if (icon==null) {
      ((OptionBox)peer).setIcon(null);
    } else {
      ((OptionBox)peer).setIcon((Image)((ImageClientImpl)icon).peer);
    }
  }

  public boolean hasInput() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setInput(boolean input) {
    ((OptionBox)peer).setInput(input);
  }

  // Callback methods
  //

  public void addOptionBoxCallback(OptionBoxCallback callback) {
    ((OptionBox)peer).addOptionBoxCallback(callback);
  }

  public void removeOptionBoxCallback(OptionBoxCallback callback) {
    ((OptionBox)peer).removeOptionBoxCallback(callback);
  }

  public void removeAllOptionBoxCallbacks() {
    ((OptionBox)peer).removeAllOptionBoxCallbacks();
  }

  public OptionBoxCallbackList getOptionBoxCallbackList() {
    throw new ImplementationException("callback get methods are not supported in client context");
  }

  // other methods
  //

  public void open() {
    ((OptionBox)peer).open();
  }

  public void open(Desktop desktop) {
    Desktop desktopPeer;
    if (desktop==null) {
     desktopPeer = null;
    } else {
     desktopPeer = (Desktop)((DesktopClientImpl)desktop).peer;
    }
    ((OptionBox)peer).open(desktopPeer);
  }

  // local callback handlers
  //

  private class LocalCallback implements OptionBoxCallback {

    public void optionSelected(OptionBox optionBox, int option, String text) {
      Message message = new CallbackMessage(OptionBoxClientImpl.this.getId(), optionBoxOptionSelectedIntStringId);
      message.writeInt(option);
      message.writeString(text);
      transport.writeMessage(message);
    }
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      case titleId:
        setTitle(message.readString());
        break;
      case messageId:
        setMessage(message.readString());
        break;
      case messageTypeId:
        setMessageType(message.readInt());
        break;
      case buttonSetId:
        setButtonSet(message.readInt());
        break;
      case iconId:
        setIcon((Image)objectRegistry.findObject(message.readObjectId()));
        break;
      case inputId:
        setInput(message.readBoolean());
        break;
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }

  public void handleMethodCall(int methodId, Message message) {

    // method parameter values
    //
    Desktop openDesktop;

    switch (methodId) {
      case openId:
        open();
        break;
      case openDesktopId:
        openDesktop = (Desktop)objectRegistry.findObject(message.readObjectId());
        open(openDesktop);
        break;
      default:
        super.handleMethodCall(methodId, message);
    }
  }

  public void handleEnableCallbacks() {
    addOptionBoxCallback(new LocalCallback());
  }

  public void handleDisableCallbacks() {
    removeAllOptionBoxCallbacks();
  }
}
