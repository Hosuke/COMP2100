/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/TableDataClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:34
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ArmidaleObject;
  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.TableData;
  import armidale.api.gui.TableDataCallback;
  import armidale.api.gui.TableDataCallbackList;
  import armidale.api.gui.TableDataFactory;
  import armidale.api.impl.clientserver.ArmidaleObjectClientImpl;

public class TableDataClientImpl extends ArmidaleObjectClientImpl implements TableDataClientServerIds {

  // constructor
  //
  public TableDataClientImpl(ClientContext context, TableData peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return TableDataFactory.CLASS_ID;
  }

  // Callback methods
  //

  public void addTableDataCallback(TableDataCallback callback) {
    ((TableData)peer).addTableDataCallback(callback);
  }

  public void removeTableDataCallback(TableDataCallback callback) {
    ((TableData)peer).removeTableDataCallback(callback);
  }

  public void removeAllTableDataCallbacks() {
    ((TableData)peer).removeAllTableDataCallbacks();
  }

  public TableDataCallbackList getTableDataCallbackList() {
    throw new ImplementationException("callback get methods are not supported in client context");
  }

  // other methods
  //

  public void setItemColumnCount(int count) {
    ((TableData)peer).setItemColumnCount(count);
  }

  public void setItemRowCount(int count) {
    ((TableData)peer).setItemRowCount(count);
  }

  public void setItem(int row, int column, ArmidaleObject armidaleObject) {
    ArmidaleObject armidaleObjectPeer;
    if (armidaleObject==null) {
     armidaleObjectPeer = null;
    } else {
     armidaleObjectPeer = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObject).peer;
    }
    ((TableData)peer).setItem(row, column, armidaleObjectPeer);
  }

  public void setItem(int firstRow, int rowCount, int column, ArmidaleObject armidaleObject) {
    ArmidaleObject armidaleObjectPeer;
    if (armidaleObject==null) {
     armidaleObjectPeer = null;
    } else {
     armidaleObjectPeer = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObject).peer;
    }
    ((TableData)peer).setItem(firstRow, rowCount, column, armidaleObjectPeer);
  }

  public void setItemRow(int row, ArmidaleObject[] armidaleObjects) {
    ArmidaleObject[] armidaleObjectsPeerArray = new ArmidaleObject[armidaleObjects.length];
    for (int i=0; i < armidaleObjects.length; i++) {
      if (armidaleObjects[i]==null) {
       armidaleObjectsPeerArray[i] = null;
      } else {
       armidaleObjectsPeerArray[i] = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObjects[i]).peer;
      }
    }
    ((TableData)peer).setItemRow(row, armidaleObjectsPeerArray);
  }

  public void setItemRow(int row, int count, ArmidaleObject[] armidaleObjects) {
    ArmidaleObject[] armidaleObjectsPeerArray = new ArmidaleObject[armidaleObjects.length];
    for (int i=0; i < armidaleObjects.length; i++) {
      if (armidaleObjects[i]==null) {
       armidaleObjectsPeerArray[i] = null;
      } else {
       armidaleObjectsPeerArray[i] = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObjects[i]).peer;
      }
    }
    ((TableData)peer).setItemRow(row, count, armidaleObjectsPeerArray);
  }

  public void insertItemRow(int row, ArmidaleObject[] armidaleObjects) {
    ArmidaleObject[] armidaleObjectsPeerArray = new ArmidaleObject[armidaleObjects.length];
    for (int i=0; i < armidaleObjects.length; i++) {
      if (armidaleObjects[i]==null) {
       armidaleObjectsPeerArray[i] = null;
      } else {
       armidaleObjectsPeerArray[i] = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObjects[i]).peer;
      }
    }
    ((TableData)peer).insertItemRow(row, armidaleObjectsPeerArray);
  }

  public void removeItemRow(int row) {
    ((TableData)peer).removeItemRow(row);
  }

  public void removeItemRows(int row, int count) {
    ((TableData)peer).removeItemRows(row, count);
  }

  public void removeAllItemRows() {
    ((TableData)peer).removeAllItemRows();
  }

  public void setItemColumnTitle(int column, String title) {
    ((TableData)peer).setItemColumnTitle(column, title);
  }

  // local callback handlers
  //

  private class LocalCallback implements TableDataCallback {

    public void requestRows(TableData tableData, int first, int count) {
      Message message = new CallbackMessage(TableDataClientImpl.this.getId(), tableDataRequestRowsIntIntId);
      message.writeInt(first);
      message.writeInt(count);
      transport.writeMessage(message);
    }
  }

  public void handleMethodCall(int methodId, Message message) {

    // method parameter values
    //
    int setItemColumnCountCount;
    int setItemRowCountCount;
    int setItemRow;
    int setItemColumn;
    ArmidaleObject setItemArmidaleObject;
    int setItemFirstRow;
    int setItemRowCount;
    int setItemRowRow;
    ArmidaleObject[] setItemRowArmidaleObjects;
    int insertItemRowRow;
    ArmidaleObject[] insertItemRowArmidaleObjects;
    int removeItemRowRow;
    int removeItemRowsRow;
    int removeItemRowsCount;
    int setItemColumnTitleColumn;
    String setItemColumnTitleTitle;

    switch (methodId) {
      case setItemColumnCountIntId:
        setItemColumnCountCount = message.readInt();
        setItemColumnCount(setItemColumnCountCount);
        break;
      case setItemRowCountIntId:
        setItemRowCountCount = message.readInt();
        setItemRowCount(setItemRowCountCount);
        break;
      case setItemIntIntArmidaleObjectId:
        setItemRow = message.readInt();
        setItemColumn = message.readInt();
        setItemArmidaleObject = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        setItem(setItemRow, setItemColumn, setItemArmidaleObject);
        break;
      case setItemIntIntIntArmidaleObjectId:
        setItemFirstRow = message.readInt();
        setItemRowCount = message.readInt();
        setItemColumn = message.readInt();
        setItemArmidaleObject = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        setItem(setItemFirstRow, setItemRowCount, setItemColumn, setItemArmidaleObject);
        break;
      case setItemRowIntArmidaleObjectId:
        setItemRowRow = message.readInt();
        setItemRowArmidaleObjects = new ArmidaleObject[message.readInt()];
        for (int i=0; i < setItemRowArmidaleObjects.length; i++) {
          setItemRowArmidaleObjects[i] = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        }
        setItemRow(setItemRowRow, setItemRowArmidaleObjects);
        break;
      case setItemRowIntIntArmidaleObjectId:
        setItemRowRow = message.readInt();
        setItemRowCount = message.readInt();
        setItemRowArmidaleObjects = new ArmidaleObject[message.readInt()];
        for (int i=0; i < setItemRowArmidaleObjects.length; i++) {
          setItemRowArmidaleObjects[i] = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        }
        setItemRow(setItemRowRow, setItemRowCount, setItemRowArmidaleObjects);
        break;
      case insertItemRowIntArmidaleObjectId:
        insertItemRowRow = message.readInt();
        insertItemRowArmidaleObjects = new ArmidaleObject[message.readInt()];
        for (int i=0; i < insertItemRowArmidaleObjects.length; i++) {
          insertItemRowArmidaleObjects[i] = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        }
        insertItemRow(insertItemRowRow, insertItemRowArmidaleObjects);
        break;
      case removeItemRowIntId:
        removeItemRowRow = message.readInt();
        removeItemRow(removeItemRowRow);
        break;
      case removeItemRowsIntIntId:
        removeItemRowsRow = message.readInt();
        removeItemRowsCount = message.readInt();
        removeItemRows(removeItemRowsRow, removeItemRowsCount);
        break;
      case removeAllItemRowsId:
        removeAllItemRows();
        break;
      case setItemColumnTitleIntStringId:
        setItemColumnTitleColumn = message.readInt();
        setItemColumnTitleTitle = message.readString();
        setItemColumnTitle(setItemColumnTitleColumn, setItemColumnTitleTitle);
        break;
      default:
        super.handleMethodCall(methodId, message);
    }
  }

  public void handleEnableCallbacks() {
    addTableDataCallback(new LocalCallback());
  }

  public void handleDisableCallbacks() {
    removeAllTableDataCallbacks();
  }
}
