/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/FrameServerImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:26
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.context.clientserver.*;
  import armidale.api.gui.Color;
  import armidale.api.gui.FrameFactory;
  import armidale.api.gui.Image;
  import armidale.api.gui.MenuBar;
  import armidale.api.gui.Position;
  import armidale.api.gui.Size;
  import armidale.api.gui.Widget;
  import armidale.api.gui.constants.Compass;
  import java.io.IOException;

public class FrameServerImpl extends WindowServerImpl implements FrameClientServerIds {

  // readable attributes
  //
  protected Size size = DEFAULT_SIZE;
  protected Position position = DEFAULT_POSITION;
  protected boolean resizable = DEFAULT_RESIZABLE;
  protected String title = DEFAULT_TITLE;
  protected Widget content;
  protected Image icon;
  protected MenuBar menubar;
  protected Widget toolbar;
  protected Widget statusbar;
  protected Color backgroundColor = DEFAULT_BACKGROUNDCOLOR;

  // constructor
  //
  public FrameServerImpl(ServerContext context) {
    super(context);
  }

  // Class ID
  //
  public int getClassId() {
    return FrameFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
    Message msg = new SetAttributeMessage(this.getId(), sizeId);
    msg.writeSize(size);
    transport.writeMessage(msg);
  }

  public Position getPosition() {
    return position;
  }

  public void setPosition(Position position) {
    this.position = position;
    Message msg = new SetAttributeMessage(this.getId(), positionId);
    msg.writePosition(position);
    transport.writeMessage(msg);
  }

  public boolean isResizable() {
    return resizable;
  }

  public void setResizable(boolean resizable) {
    this.resizable = resizable;
    Message msg = new SetAttributeMessage(this.getId(), resizableId);
    msg.writeBoolean(resizable);
    transport.writeMessage(msg);
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
    Message msg = new SetAttributeMessage(this.getId(), titleId);
    msg.writeString(title);
    transport.writeMessage(msg);
  }

  public Widget getContent() {
    return content;
  }

  public void setContent(Widget content) {
    this.content = content;
    Message msg = new SetAttributeMessage(this.getId(), contentId);
    msg.writeObjectId((MessagingObject)content);
    transport.writeMessage(msg);
  }

  public Image getIcon() {
    return icon;
  }

  public void setIcon(Image icon) {
    this.icon = icon;
    Message msg = new SetAttributeMessage(this.getId(), iconId);
    msg.writeObjectId((MessagingObject)icon);
    transport.writeMessage(msg);
  }

  public MenuBar getMenubar() {
    return menubar;
  }

  public void setMenubar(MenuBar menubar) {
    this.menubar = menubar;
    Message msg = new SetAttributeMessage(this.getId(), menubarId);
    msg.writeObjectId((MessagingObject)menubar);
    transport.writeMessage(msg);
  }

  public Widget getToolbar() {
    return toolbar;
  }

  public void setToolbar(Widget toolbar) {
    this.toolbar = toolbar;
    Message msg = new SetAttributeMessage(this.getId(), toolbarId);
    msg.writeObjectId((MessagingObject)toolbar);
    transport.writeMessage(msg);
  }

  public Widget getStatusbar() {
    return statusbar;
  }

  public void setStatusbar(Widget statusbar) {
    this.statusbar = statusbar;
    Message msg = new SetAttributeMessage(this.getId(), statusbarId);
    msg.writeObjectId((MessagingObject)statusbar);
    transport.writeMessage(msg);
  }

  public Color getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(Color backgroundColor) {
    this.backgroundColor = backgroundColor;
    Message msg = new SetAttributeMessage(this.getId(), backgroundColorId);
    msg.writeColor(backgroundColor);
    transport.writeMessage(msg);
  }

  // other methods
  //

  public void setAlignment(float xAlign, float yAlign) {
    Message msg = new MethodCallMessage(this.getId(), setAlignmentFloatFloatId);
    msg.writeFloat(xAlign);
    msg.writeFloat(yAlign);
    transport.writeMessage(msg);
  }

  public void setAlignment(int alignment) {
    Message msg = new MethodCallMessage(this.getId(), setAlignmentIntId);
    msg.writeInt(alignment);
    transport.writeMessage(msg);
  }

}
