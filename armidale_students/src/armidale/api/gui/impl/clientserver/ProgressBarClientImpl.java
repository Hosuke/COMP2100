/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/ProgressBarClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:15
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.ProgressBar;
  import armidale.api.gui.ProgressBarFactory;
  import armidale.api.gui.constants.Orientation;

public class ProgressBarClientImpl extends WidgetClientImpl implements ProgressBarClientServerIds {

  // constructor
  //
  public ProgressBarClientImpl(ClientContext context, ProgressBar peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return ProgressBarFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public int getMinimum() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setMinimum(int minimum) {
    ((ProgressBar)peer).setMinimum(minimum);
  }

  public int getMaximum() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setMaximum(int maximum) {
    ((ProgressBar)peer).setMaximum(maximum);
  }

  public int getValue() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setValue(int value) {
    ((ProgressBar)peer).setValue(value);
  }

  public boolean drawsProgressString() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setDrawProgressString(boolean drawProgressString) {
    ((ProgressBar)peer).setDrawProgressString(drawProgressString);
  }

  public int getOrientation() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setOrientation(int orientation) {
    ((ProgressBar)peer).setOrientation(orientation);
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      case minimumId:
        setMinimum(message.readInt());
        break;
      case maximumId:
        setMaximum(message.readInt());
        break;
      case valueId:
        setValue(message.readInt());
        break;
      case drawProgressStringId:
        setDrawProgressString(message.readBoolean());
        break;
      case orientationId:
        setOrientation(message.readInt());
        break;
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }
}
