/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/GridPanelWidgetClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:30
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.GridPanelWidget;
  import armidale.api.gui.GridPanelWidgetFactory;
  import armidale.api.gui.Insets;
  import armidale.api.gui.Widget;
  import armidale.api.gui.constants.Compass;
  import armidale.api.gui.constants.FillMode;
  import armidale.api.gui.constants.GridCell;
  import armidale.api.impl.clientserver.ArmidaleObjectClientImpl;

public class GridPanelWidgetClientImpl extends ArmidaleObjectClientImpl implements GridPanelWidgetClientServerIds {

  // constructor
  //
  public GridPanelWidgetClientImpl(ClientContext context, GridPanelWidget peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return GridPanelWidgetFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public Widget getWidget() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setWidget(Widget widget) {
    if (widget==null) {
      ((GridPanelWidget)peer).setWidget(null);
    } else {
      ((GridPanelWidget)peer).setWidget((Widget)((WidgetClientImpl)widget).peer);
    }
  }

  public int getGridX() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setGridX(int gridX) {
    ((GridPanelWidget)peer).setGridX(gridX);
  }

  public int getGridY() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setGridY(int gridY) {
    ((GridPanelWidget)peer).setGridY(gridY);
  }

  public int getGridWidth() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setGridWidth(int gridWidth) {
    ((GridPanelWidget)peer).setGridWidth(gridWidth);
  }

  public int getGridHeight() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setGridHeight(int gridHeight) {
    ((GridPanelWidget)peer).setGridHeight(gridHeight);
  }

  public float getWeightX() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setWeightX(float weightX) {
    ((GridPanelWidget)peer).setWeightX(weightX);
  }

  public float getWeightY() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setWeightY(float weightY) {
    ((GridPanelWidget)peer).setWeightY(weightY);
  }

  public int getAnchor() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setAnchor(int anchor) {
    ((GridPanelWidget)peer).setAnchor(anchor);
  }

  public int getFill() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setFill(int fill) {
    ((GridPanelWidget)peer).setFill(fill);
  }

  public Insets getInsets() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setInsets(Insets insets) {
    ((GridPanelWidget)peer).setInsets(insets);
  }

  public int getInternalPadX() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setInternalPadX(int internalPadX) {
    ((GridPanelWidget)peer).setInternalPadX(internalPadX);
  }

  public int getInternalPadY() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setInternalPadY(int internalPadY) {
    ((GridPanelWidget)peer).setInternalPadY(internalPadY);
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      case widgetId:
        setWidget((Widget)objectRegistry.findObject(message.readObjectId()));
        break;
      case gridXId:
        setGridX(message.readInt());
        break;
      case gridYId:
        setGridY(message.readInt());
        break;
      case gridWidthId:
        setGridWidth(message.readInt());
        break;
      case gridHeightId:
        setGridHeight(message.readInt());
        break;
      case weightXId:
        setWeightX(message.readFloat());
        break;
      case weightYId:
        setWeightY(message.readFloat());
        break;
      case anchorId:
        setAnchor(message.readInt());
        break;
      case fillId:
        setFill(message.readInt());
        break;
      case insetsId:
        setInsets(message.readInsets());
        break;
      case internalPadXId:
        setInternalPadX(message.readInt());
        break;
      case internalPadYId:
        setInternalPadY(message.readInt());
        break;
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }
}
