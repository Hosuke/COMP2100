/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/WindowServerImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:25
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.context.clientserver.*;
  import armidale.api.gui.Position;
  import armidale.api.gui.Size;
  import armidale.api.gui.WindowCallback;
  import armidale.api.gui.WindowCallbackList;
  import java.io.IOException;
  import java.util.LinkedList;

public abstract class WindowServerImpl extends VisibleObjectServerImpl implements WindowClientServerIds {

  // Callback object
  //

  protected WindowCallbackList windowCallbackList = new WindowCallbackList();

  // constructor
  //
  public WindowServerImpl(ServerContext context) {
    super(context);
  }

  // Callback
  //

  public void addWindowCallback(WindowCallback callback) {
    Message msg;
    windowCallbackList.add(callback);
    if (windowCallbackList.size() == 1) {
      msg = new EnableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeWindowCallback(WindowCallback callback) {
    Message msg;
    windowCallbackList.remove(callback);
    if (windowCallbackList.size() == 0) {
      msg = new DisableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeAllWindowCallbacks() {
    Message msg;
    windowCallbackList.clear();
    msg = new DisableCallbacksMessage(this.getId());
    transport.writeMessage(msg);
  }

  public WindowCallbackList getWindowCallbackList() {
    return windowCallbackList;
  }

  // other methods
  //

  public void dispose() {
    Message msg = new MethodCallMessage(this.getId(), disposeId);
    transport.writeMessage(msg);
  }

  // transport
  //

  public void handleCallback(int callbackMethodId, Message message) {
    Position windowMovedPosition;
    Size windowResizedSize;

    switch (callbackMethodId) {
      case windowWindowOpenId:
        windowCallbackList.windowOpen(this);
        break;
      case windowWindowActivatedId:
        windowCallbackList.windowActivated(this);
        break;
      case windowWindowClosedId:
        windowCallbackList.windowClosed(this);
        break;
      case windowWindowClosingId:
        windowCallbackList.windowClosing(this);
        break;
      case windowWindowDeactivatedId:
        windowCallbackList.windowDeactivated(this);
        break;
      case windowWindowDeiconifiedId:
        windowCallbackList.windowDeiconified(this);
        break;
      case windowWindowIconifiedId:
        windowCallbackList.windowIconified(this);
        break;
      case windowWindowOpenedId:
        windowCallbackList.windowOpened(this);
        break;
      case windowWindowMovedPositionId:
        windowMovedPosition = message.readPosition();
        windowCallbackList.windowMoved(this, windowMovedPosition);
        break;
      case windowWindowResizedSizeId:
        windowResizedSize = message.readSize();
        windowCallbackList.windowResized(this, windowResizedSize);
        break;
    }
  }

}
