/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/ComponentServerImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:57:45
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.context.clientserver.*;
  import armidale.api.gui.Color;
  import armidale.api.gui.Font;
  import armidale.api.gui.PopupMenu;
  import armidale.api.gui.constants.CursorType;
  import java.io.IOException;

public abstract class ComponentServerImpl extends VisibleObjectServerImpl implements ComponentClientServerIds {

  // readable attributes
  //
  protected boolean enabled = DEFAULT_ENABLED;
  protected String toolTip = DEFAULT_TOOLTIP;
  protected PopupMenu popupMenu;
  protected Font font = DEFAULT_FONT;
  protected Color foregroundColor = DEFAULT_FOREGROUNDCOLOR;
  protected Color backgroundColor = DEFAULT_BACKGROUNDCOLOR;
  protected int cursorType = DEFAULT_CURSORTYPE;

  // constructor
  //
  public ComponentServerImpl(ServerContext context) {
    super(context);
    setVisible(DEFAULT_COMPONENT_VISIBLE);
  }

  // attribute set/get/is methods
  //

  public boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(boolean enabled) {
    this.enabled = enabled;
    Message msg = new SetAttributeMessage(this.getId(), enabledId);
    msg.writeBoolean(enabled);
    transport.writeMessage(msg);
  }

  public String getToolTip() {
    return toolTip;
  }

  public void setToolTip(String toolTip) {
    this.toolTip = toolTip;
    Message msg = new SetAttributeMessage(this.getId(), toolTipId);
    msg.writeString(toolTip);
    transport.writeMessage(msg);
  }

  public PopupMenu getPopupMenu() {
    return popupMenu;
  }

  public void setPopupMenu(PopupMenu popupMenu) {
    this.popupMenu = popupMenu;
    Message msg = new SetAttributeMessage(this.getId(), popupMenuId);
    msg.writeObjectId((MessagingObject)popupMenu);
    transport.writeMessage(msg);
  }

  public Font getFont() {
    return font;
  }

  public void setFont(Font font) {
    this.font = font;
    Message msg = new SetAttributeMessage(this.getId(), fontId);
    msg.writeFont(font);
    transport.writeMessage(msg);
  }

  public Color getForegroundColor() {
    return foregroundColor;
  }

  public void setForegroundColor(Color foregroundColor) {
    this.foregroundColor = foregroundColor;
    Message msg = new SetAttributeMessage(this.getId(), foregroundColorId);
    msg.writeColor(foregroundColor);
    transport.writeMessage(msg);
  }

  public Color getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(Color backgroundColor) {
    this.backgroundColor = backgroundColor;
    Message msg = new SetAttributeMessage(this.getId(), backgroundColorId);
    msg.writeColor(backgroundColor);
    transport.writeMessage(msg);
  }

  public int getCursorType() {
    return cursorType;
  }

  public void setCursorType(int cursorType) {
    this.cursorType = cursorType;
    Message msg = new SetAttributeMessage(this.getId(), cursorTypeId);
    msg.writeInt(cursorType);
    transport.writeMessage(msg);
  }

}
