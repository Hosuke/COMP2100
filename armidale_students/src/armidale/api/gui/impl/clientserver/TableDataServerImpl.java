/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/TableDataServerImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:34
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ArmidaleObject;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.TableDataCallback;
  import armidale.api.gui.TableDataCallbackList;
  import armidale.api.gui.TableDataFactory;
  import armidale.api.impl.clientserver.ArmidaleObjectServerImpl;
  import java.io.IOException;
  import java.util.LinkedList;

public class TableDataServerImpl extends ArmidaleObjectServerImpl implements TableDataClientServerIds {

  // Callback object
  //

  protected TableDataCallbackList tableDataCallbackList = new TableDataCallbackList();

  // constructor
  //
  public TableDataServerImpl(ServerContext context) {
    super(context);
  }

  // Class ID
  //
  public int getClassId() {
    return TableDataFactory.CLASS_ID;
  }

  // Callback
  //

  public void addTableDataCallback(TableDataCallback callback) {
    Message msg;
    tableDataCallbackList.add(callback);
    if (tableDataCallbackList.size() == 1) {
      msg = new EnableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeTableDataCallback(TableDataCallback callback) {
    Message msg;
    tableDataCallbackList.remove(callback);
    if (tableDataCallbackList.size() == 0) {
      msg = new DisableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeAllTableDataCallbacks() {
    Message msg;
    tableDataCallbackList.clear();
    msg = new DisableCallbacksMessage(this.getId());
    transport.writeMessage(msg);
  }

  public TableDataCallbackList getTableDataCallbackList() {
    return tableDataCallbackList;
  }

  // other methods
  //

  public void setItemColumnCount(int count) {
    Message msg = new MethodCallMessage(this.getId(), setItemColumnCountIntId);
    msg.writeInt(count);
    transport.writeMessage(msg);
  }

  public void setItemRowCount(int count) {
    Message msg = new MethodCallMessage(this.getId(), setItemRowCountIntId);
    msg.writeInt(count);
    transport.writeMessage(msg);
  }

  public void setItem(int row, int column, ArmidaleObject armidaleObject) {
    Message msg = new MethodCallMessage(this.getId(), setItemIntIntArmidaleObjectId);
    msg.writeInt(row);
    msg.writeInt(column);
    msg.writeObjectId((MessagingObject)armidaleObject);
    transport.writeMessage(msg);
  }

  public void setItem(int firstRow, int rowCount, int column, ArmidaleObject armidaleObject) {
    Message msg = new MethodCallMessage(this.getId(), setItemIntIntIntArmidaleObjectId);
    msg.writeInt(firstRow);
    msg.writeInt(rowCount);
    msg.writeInt(column);
    msg.writeObjectId((MessagingObject)armidaleObject);
    transport.writeMessage(msg);
  }

  public void setItemRow(int row, ArmidaleObject[] armidaleObjects) {
    Message msg = new MethodCallMessage(this.getId(), setItemRowIntArmidaleObjectId);
    msg.writeInt(row);
    msg.writeInt(armidaleObjects.length);
    for (int i=0; i<armidaleObjects.length; i++) {
      msg.writeObjectId((MessagingObject)armidaleObjects[i]);
    }
    transport.writeMessage(msg);
  }

  public void setItemRow(int row, int count, ArmidaleObject[] armidaleObjects) {
    Message msg = new MethodCallMessage(this.getId(), setItemRowIntIntArmidaleObjectId);
    msg.writeInt(row);
    msg.writeInt(count);
    msg.writeInt(armidaleObjects.length);
    for (int i=0; i<armidaleObjects.length; i++) {
      msg.writeObjectId((MessagingObject)armidaleObjects[i]);
    }
    transport.writeMessage(msg);
  }

  public void insertItemRow(int row, ArmidaleObject[] armidaleObjects) {
    Message msg = new MethodCallMessage(this.getId(), insertItemRowIntArmidaleObjectId);
    msg.writeInt(row);
    msg.writeInt(armidaleObjects.length);
    for (int i=0; i<armidaleObjects.length; i++) {
      msg.writeObjectId((MessagingObject)armidaleObjects[i]);
    }
    transport.writeMessage(msg);
  }

  public void removeItemRow(int row) {
    Message msg = new MethodCallMessage(this.getId(), removeItemRowIntId);
    msg.writeInt(row);
    transport.writeMessage(msg);
  }

  public void removeItemRows(int row, int count) {
    Message msg = new MethodCallMessage(this.getId(), removeItemRowsIntIntId);
    msg.writeInt(row);
    msg.writeInt(count);
    transport.writeMessage(msg);
  }

  public void removeAllItemRows() {
    Message msg = new MethodCallMessage(this.getId(), removeAllItemRowsId);
    transport.writeMessage(msg);
  }

  public void setItemColumnTitle(int column, String title) {
    Message msg = new MethodCallMessage(this.getId(), setItemColumnTitleIntStringId);
    msg.writeInt(column);
    msg.writeString(title);
    transport.writeMessage(msg);
  }

  // transport
  //

  public void handleCallback(int callbackMethodId, Message message) {
    int requestRowsFirst;
    int requestRowsCount;

    switch (callbackMethodId) {
      case tableDataRequestRowsIntIntId:
        requestRowsFirst = message.readInt();
        requestRowsCount = message.readInt();
        tableDataCallbackList.requestRows(this, requestRowsFirst, requestRowsCount);
        break;
    }
  }

}
