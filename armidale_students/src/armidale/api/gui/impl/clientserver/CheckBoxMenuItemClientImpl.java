/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/CheckBoxMenuItemClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:57:53
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.CheckBoxMenuItem;
  import armidale.api.gui.CheckBoxMenuItemCallback;
  import armidale.api.gui.CheckBoxMenuItemCallbackList;
  import armidale.api.gui.CheckBoxMenuItemFactory;

public class CheckBoxMenuItemClientImpl extends MenuItemClientImpl implements CheckBoxMenuItemClientServerIds {

  // constructor
  //
  public CheckBoxMenuItemClientImpl(ClientContext context, CheckBoxMenuItem peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return CheckBoxMenuItemFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public boolean isSelected() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setSelected(boolean selected) {
    ((CheckBoxMenuItem)peer).setSelected(selected);
  }

  // Callback methods
  //

  public void addCheckBoxMenuItemCallback(CheckBoxMenuItemCallback callback) {
    ((CheckBoxMenuItem)peer).addCheckBoxMenuItemCallback(callback);
  }

  public void removeCheckBoxMenuItemCallback(CheckBoxMenuItemCallback callback) {
    ((CheckBoxMenuItem)peer).removeCheckBoxMenuItemCallback(callback);
  }

  public void removeAllCheckBoxMenuItemCallbacks() {
    ((CheckBoxMenuItem)peer).removeAllCheckBoxMenuItemCallbacks();
  }

  public CheckBoxMenuItemCallbackList getCheckBoxMenuItemCallbackList() {
    throw new ImplementationException("callback get methods are not supported in client context");
  }

  // local callback handlers
  //

  private class LocalCallback implements CheckBoxMenuItemCallback {

    public void stateChange(CheckBoxMenuItem checkBoxMenuItem, boolean selected) {
      Message message = new CallbackMessage(CheckBoxMenuItemClientImpl.this.getId(), checkBoxMenuItemStateChangeBooleanId);
      message.writeBoolean(selected);
      transport.writeMessage(message);
    }
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      case selectedId:
        setSelected(message.readBoolean());
        break;
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }

  public void handleEnableCallbacks() {
    addCheckBoxMenuItemCallback(new LocalCallback());
  }

  public void handleDisableCallbacks() {
    removeAllCheckBoxMenuItemCallbacks();
  }
}
