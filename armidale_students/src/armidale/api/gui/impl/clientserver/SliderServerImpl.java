/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/SliderServerImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:05
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.context.clientserver.*;
  import armidale.api.gui.SliderCallback;
  import armidale.api.gui.SliderCallbackList;
  import armidale.api.gui.SliderFactory;
  import armidale.api.gui.constants.Orientation;
  import java.io.IOException;
  import java.util.LinkedList;

public class SliderServerImpl extends WidgetServerImpl implements SliderClientServerIds {

  // readable attributes
  //
  protected int minimum = DEFAULT_MINIMUM;
  protected int maximum = DEFAULT_MAXIMUM;
  protected int value = DEFAULT_VALUE;
  protected int orientation = DEFAULT_ORIENTATION;
  protected int majorTickSpacing = DEFAULT_MAJORTICKSPACING;
  protected int minorTickSpacing = DEFAULT_MINORTICKSPACING;
  protected boolean ticksVisible = DEFAULT_TICKSVISIBLE;
  protected boolean labelsVisible = DEFAULT_LABELSVISIBLE;
  protected boolean snapToTicks = DEFAULT_SNAPTOTICKS;

  // Callback object
  //

  protected SliderCallbackList sliderCallbackList = new SliderCallbackList();

  // constructor
  //
  public SliderServerImpl(ServerContext context) {
    super(context);
  }

  // Class ID
  //
  public int getClassId() {
    return SliderFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public int getMinimum() {
    return minimum;
  }

  public void setMinimum(int minimum) {
    this.minimum = minimum;
    Message msg = new SetAttributeMessage(this.getId(), minimumId);
    msg.writeInt(minimum);
    transport.writeMessage(msg);
  }

  public int getMaximum() {
    return maximum;
  }

  public void setMaximum(int maximum) {
    this.maximum = maximum;
    Message msg = new SetAttributeMessage(this.getId(), maximumId);
    msg.writeInt(maximum);
    transport.writeMessage(msg);
  }

  public int getValue() {
    return value;
  }

  public void setValue(int value) {
    this.value = value;
    Message msg = new SetAttributeMessage(this.getId(), valueId);
    msg.writeInt(value);
    transport.writeMessage(msg);
  }

  public int getOrientation() {
    return orientation;
  }

  public void setOrientation(int orientation) {
    this.orientation = orientation;
    Message msg = new SetAttributeMessage(this.getId(), orientationId);
    msg.writeInt(orientation);
    transport.writeMessage(msg);
  }

  public int getMajorTickSpacing() {
    return majorTickSpacing;
  }

  public void setMajorTickSpacing(int majorTickSpacing) {
    this.majorTickSpacing = majorTickSpacing;
    Message msg = new SetAttributeMessage(this.getId(), majorTickSpacingId);
    msg.writeInt(majorTickSpacing);
    transport.writeMessage(msg);
  }

  public int getMinorTickSpacing() {
    return minorTickSpacing;
  }

  public void setMinorTickSpacing(int minorTickSpacing) {
    this.minorTickSpacing = minorTickSpacing;
    Message msg = new SetAttributeMessage(this.getId(), minorTickSpacingId);
    msg.writeInt(minorTickSpacing);
    transport.writeMessage(msg);
  }

  public boolean ticksVisible() {
    return ticksVisible;
  }

  public void setTicksVisible(boolean ticksVisible) {
    this.ticksVisible = ticksVisible;
    Message msg = new SetAttributeMessage(this.getId(), ticksVisibleId);
    msg.writeBoolean(ticksVisible);
    transport.writeMessage(msg);
  }

  public boolean labelsVisible() {
    return labelsVisible;
  }

  public void setLabelsVisible(boolean labelsVisible) {
    this.labelsVisible = labelsVisible;
    Message msg = new SetAttributeMessage(this.getId(), labelsVisibleId);
    msg.writeBoolean(labelsVisible);
    transport.writeMessage(msg);
  }

  public boolean snapToTicks() {
    return snapToTicks;
  }

  public void setSnapToTicks(boolean snapToTicks) {
    this.snapToTicks = snapToTicks;
    Message msg = new SetAttributeMessage(this.getId(), snapToTicksId);
    msg.writeBoolean(snapToTicks);
    transport.writeMessage(msg);
  }

  // Callback
  //

  public void addSliderCallback(SliderCallback callback) {
    Message msg;
    sliderCallbackList.add(callback);
    if (sliderCallbackList.size() == 1) {
      msg = new EnableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeSliderCallback(SliderCallback callback) {
    Message msg;
    sliderCallbackList.remove(callback);
    if (sliderCallbackList.size() == 0) {
      msg = new DisableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeAllSliderCallbacks() {
    Message msg;
    sliderCallbackList.clear();
    msg = new DisableCallbacksMessage(this.getId());
    transport.writeMessage(msg);
  }

  public SliderCallbackList getSliderCallbackList() {
    return sliderCallbackList;
  }

  // other methods
  //

  public void addLabel(int value, String label) {
    Message msg = new MethodCallMessage(this.getId(), addLabelIntStringId);
    msg.writeInt(value);
    msg.writeString(label);
    transport.writeMessage(msg);
  }

  public void useIntegerLabels(int spacing) {
    Message msg = new MethodCallMessage(this.getId(), useIntegerLabelsIntId);
    msg.writeInt(spacing);
    transport.writeMessage(msg);
  }

  // transport
  //

  public void handleCallback(int callbackMethodId, Message message) {
    int valueAdjustedValue;

    switch (callbackMethodId) {
      case sliderValueAdjustedIntId:
        valueAdjustedValue = message.readInt();
        sliderCallbackList.valueAdjusted(this, valueAdjustedValue);
        break;
    }
  }

}
