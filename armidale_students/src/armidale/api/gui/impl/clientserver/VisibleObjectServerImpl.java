/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/VisibleObjectServerImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:57:44
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.context.clientserver.*;
  import armidale.api.gui.Position;
  import armidale.api.gui.VisibleObjectCallback;
  import armidale.api.gui.VisibleObjectCallbackList;
  import armidale.api.impl.clientserver.ArmidaleObjectServerImpl;
  import java.io.IOException;
  import java.util.LinkedList;

public abstract class VisibleObjectServerImpl extends ArmidaleObjectServerImpl implements VisibleObjectClientServerIds {

  // readable attributes
  //
  protected boolean visible = DEFAULT_VISIBLE;

  // Callback object
  //

  protected VisibleObjectCallbackList visibleObjectCallbackList = new VisibleObjectCallbackList();

  // constructor
  //
  public VisibleObjectServerImpl(ServerContext context) {
    super(context);
  }

  // attribute set/get/is methods
  //

  public boolean isVisible() {
    return visible;
  }

  public void setVisible(boolean visible) {
    this.visible = visible;
    Message msg = new SetAttributeMessage(this.getId(), visibleId);
    msg.writeBoolean(visible);
    transport.writeMessage(msg);
  }

  // Callback
  //

  public void addVisibleObjectCallback(VisibleObjectCallback callback) {
    Message msg;
    visibleObjectCallbackList.add(callback);
    if (visibleObjectCallbackList.size() == 1) {
      msg = new EnableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeVisibleObjectCallback(VisibleObjectCallback callback) {
    Message msg;
    visibleObjectCallbackList.remove(callback);
    if (visibleObjectCallbackList.size() == 0) {
      msg = new DisableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeAllVisibleObjectCallbacks() {
    Message msg;
    visibleObjectCallbackList.clear();
    msg = new DisableCallbacksMessage(this.getId());
    transport.writeMessage(msg);
  }

  public VisibleObjectCallbackList getVisibleObjectCallbackList() {
    return visibleObjectCallbackList;
  }

  // other methods
  //

  public void show() {
    Message msg = new MethodCallMessage(this.getId(), showId);
    transport.writeMessage(msg);
  }

  public void hide() {
    Message msg = new MethodCallMessage(this.getId(), hideId);
    transport.writeMessage(msg);
  }

  public void refresh() {
    Message msg = new MethodCallMessage(this.getId(), refreshId);
    transport.writeMessage(msg);
  }

  // transport
  //

  public void handleCallback(int callbackMethodId, Message message) {
    Position objectMovedPosition;

    switch (callbackMethodId) {
      case visibleObjectObjectMovedPositionId:
        objectMovedPosition = message.readPosition();
        visibleObjectCallbackList.objectMoved(this, objectMovedPosition);
        break;
    }
  }

}
