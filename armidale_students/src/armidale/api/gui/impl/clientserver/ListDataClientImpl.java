/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/ListDataClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:32
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ArmidaleObject;
  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.ListData;
  import armidale.api.gui.ListDataCallback;
  import armidale.api.gui.ListDataCallbackList;
  import armidale.api.gui.ListDataFactory;
  import armidale.api.impl.clientserver.ArmidaleObjectClientImpl;

public class ListDataClientImpl extends ArmidaleObjectClientImpl implements ListDataClientServerIds {

  // constructor
  //
  public ListDataClientImpl(ClientContext context, ListData peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return ListDataFactory.CLASS_ID;
  }

  // Callback methods
  //

  public void addListDataCallback(ListDataCallback callback) {
    ((ListData)peer).addListDataCallback(callback);
  }

  public void removeListDataCallback(ListDataCallback callback) {
    ((ListData)peer).removeListDataCallback(callback);
  }

  public void removeAllListDataCallbacks() {
    ((ListData)peer).removeAllListDataCallbacks();
  }

  public ListDataCallbackList getListDataCallbackList() {
    throw new ImplementationException("callback get methods are not supported in client context");
  }

  // other methods
  //

  public void setItemCount(int count) {
    ((ListData)peer).setItemCount(count);
  }

  public void setItem(int index, ArmidaleObject armidaleObject) {
    ArmidaleObject armidaleObjectPeer;
    if (armidaleObject==null) {
     armidaleObjectPeer = null;
    } else {
     armidaleObjectPeer = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObject).peer;
    }
    ((ListData)peer).setItem(index, armidaleObjectPeer);
  }

  public void setItem(int index, int count, ArmidaleObject armidaleObject) {
    ArmidaleObject armidaleObjectPeer;
    if (armidaleObject==null) {
     armidaleObjectPeer = null;
    } else {
     armidaleObjectPeer = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObject).peer;
    }
    ((ListData)peer).setItem(index, count, armidaleObjectPeer);
  }

  public void setItems(int index, ArmidaleObject[] armidaleObjects) {
    ArmidaleObject[] armidaleObjectsPeerArray = new ArmidaleObject[armidaleObjects.length];
    for (int i=0; i < armidaleObjects.length; i++) {
      if (armidaleObjects[i]==null) {
       armidaleObjectsPeerArray[i] = null;
      } else {
       armidaleObjectsPeerArray[i] = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObjects[i]).peer;
      }
    }
    ((ListData)peer).setItems(index, armidaleObjectsPeerArray);
  }

  public void insertItem(int index, ArmidaleObject armidaleObject) {
    ArmidaleObject armidaleObjectPeer;
    if (armidaleObject==null) {
     armidaleObjectPeer = null;
    } else {
     armidaleObjectPeer = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObject).peer;
    }
    ((ListData)peer).insertItem(index, armidaleObjectPeer);
  }

  public void insertItem(int index, int count, ArmidaleObject armidaleObject) {
    ArmidaleObject armidaleObjectPeer;
    if (armidaleObject==null) {
     armidaleObjectPeer = null;
    } else {
     armidaleObjectPeer = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObject).peer;
    }
    ((ListData)peer).insertItem(index, count, armidaleObjectPeer);
  }

  public void insertItems(int index, ArmidaleObject[] armidaleObjects) {
    ArmidaleObject[] armidaleObjectsPeerArray = new ArmidaleObject[armidaleObjects.length];
    for (int i=0; i < armidaleObjects.length; i++) {
      if (armidaleObjects[i]==null) {
       armidaleObjectsPeerArray[i] = null;
      } else {
       armidaleObjectsPeerArray[i] = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObjects[i]).peer;
      }
    }
    ((ListData)peer).insertItems(index, armidaleObjectsPeerArray);
  }

  public void removeItem(int index) {
    ((ListData)peer).removeItem(index);
  }

  public void removeItems(int index, int count) {
    ((ListData)peer).removeItems(index, count);
  }

  public void addItem(ArmidaleObject armidaleObject) {
    ArmidaleObject armidaleObjectPeer;
    if (armidaleObject==null) {
     armidaleObjectPeer = null;
    } else {
     armidaleObjectPeer = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObject).peer;
    }
    ((ListData)peer).addItem(armidaleObjectPeer);
  }

  public void removeItem(ArmidaleObject armidaleObject) {
    ArmidaleObject armidaleObjectPeer;
    if (armidaleObject==null) {
     armidaleObjectPeer = null;
    } else {
     armidaleObjectPeer = (ArmidaleObject)((ArmidaleObjectClientImpl)armidaleObject).peer;
    }
    ((ListData)peer).removeItem(armidaleObjectPeer);
  }

  public void removeAllItems() {
    ((ListData)peer).removeAllItems();
  }

  // local callback handlers
  //

  private class LocalCallback implements ListDataCallback {

    public void requestItems(ListData listData, int first, int count) {
      Message message = new CallbackMessage(ListDataClientImpl.this.getId(), listDataRequestItemsIntIntId);
      message.writeInt(first);
      message.writeInt(count);
      transport.writeMessage(message);
    }
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }

  public void handleMethodCall(int methodId, Message message) {

    // method parameter values
    //
    int setItemCountCount;
    int setItemIndex;
    ArmidaleObject setItemArmidaleObject;
    int setItemCount;
    int setItemsIndex;
    ArmidaleObject[] setItemsArmidaleObjects;
    int insertItemIndex;
    ArmidaleObject insertItemArmidaleObject;
    int insertItemCount;
    int insertItemsIndex;
    ArmidaleObject[] insertItemsArmidaleObjects;
    int removeItemIndex;
    int removeItemsIndex;
    int removeItemsCount;
    ArmidaleObject addItemArmidaleObject;
    ArmidaleObject removeItemArmidaleObject;

    switch (methodId) {
      case setItemCountIntId:
        setItemCountCount = message.readInt();
        setItemCount(setItemCountCount);
        break;
      case setItemIntArmidaleObjectId:
        setItemIndex = message.readInt();
        setItemArmidaleObject = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        setItem(setItemIndex, setItemArmidaleObject);
        break;
      case setItemIntIntArmidaleObjectId:
        setItemIndex = message.readInt();
        setItemCount = message.readInt();
        setItemArmidaleObject = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        setItem(setItemIndex, setItemCount, setItemArmidaleObject);
        break;
      case setItemsIntArmidaleObjectId:
        setItemsIndex = message.readInt();
        setItemsArmidaleObjects = new ArmidaleObject[message.readInt()];
        for (int i=0; i < setItemsArmidaleObjects.length; i++) {
          setItemsArmidaleObjects[i] = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        }
        setItems(setItemsIndex, setItemsArmidaleObjects);
        break;
      case insertItemIntArmidaleObjectId:
        insertItemIndex = message.readInt();
        insertItemArmidaleObject = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        insertItem(insertItemIndex, insertItemArmidaleObject);
        break;
      case insertItemIntIntArmidaleObjectId:
        insertItemIndex = message.readInt();
        insertItemCount = message.readInt();
        insertItemArmidaleObject = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        insertItem(insertItemIndex, insertItemCount, insertItemArmidaleObject);
        break;
      case insertItemsIntArmidaleObjectId:
        insertItemsIndex = message.readInt();
        insertItemsArmidaleObjects = new ArmidaleObject[message.readInt()];
        for (int i=0; i < insertItemsArmidaleObjects.length; i++) {
          insertItemsArmidaleObjects[i] = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        }
        insertItems(insertItemsIndex, insertItemsArmidaleObjects);
        break;
      case removeItemIntId:
        removeItemIndex = message.readInt();
        removeItem(removeItemIndex);
        break;
      case removeItemsIntIntId:
        removeItemsIndex = message.readInt();
        removeItemsCount = message.readInt();
        removeItems(removeItemsIndex, removeItemsCount);
        break;
      case addItemArmidaleObjectId:
        addItemArmidaleObject = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        addItem(addItemArmidaleObject);
        break;
      case removeItemArmidaleObjectId:
        removeItemArmidaleObject = (ArmidaleObject)objectRegistry.findObject(message.readObjectId());
        removeItem(removeItemArmidaleObject);
        break;
      case removeAllItemsId:
        removeAllItems();
        break;
      default:
        super.handleMethodCall(methodId, message);
    }
  }

  public void handleEnableCallbacks() {
    addListDataCallback(new LocalCallback());
  }

  public void handleDisableCallbacks() {
    removeAllListDataCallbacks();
  }
}
