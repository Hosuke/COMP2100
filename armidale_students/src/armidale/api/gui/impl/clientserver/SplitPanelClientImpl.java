/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/SplitPanelClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:19
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.SplitPanel;
  import armidale.api.gui.SplitPanelFactory;
  import armidale.api.gui.Widget;
  import armidale.api.gui.constants.Orientation;

public class SplitPanelClientImpl extends WidgetClientImpl implements SplitPanelClientServerIds {

  // constructor
  //
  public SplitPanelClientImpl(ClientContext context, SplitPanel peer) {
    super(context, peer);
  }

  // Class ID
  //
  public int getClassId() {
    return SplitPanelFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public int getOrientation() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setOrientation(int orientation) {
    ((SplitPanel)peer).setOrientation(orientation);
  }

  public float getDividerLocation() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setDividerLocation(float dividerLocation) {
    ((SplitPanel)peer).setDividerLocation(dividerLocation);
  }

  public int getDividerSize() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setDividerSize(int dividerSize) {
    ((SplitPanel)peer).setDividerSize(dividerSize);
  }

  public float getResizeWeight() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setResizeWeight(float resizeWeight) {
    ((SplitPanel)peer).setResizeWeight(resizeWeight);
  }

  public boolean isExpandable() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setExpandable(boolean expandable) {
    ((SplitPanel)peer).setExpandable(expandable);
  }

  public Widget getLeftWidget() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setLeftWidget(Widget leftWidget) {
    if (leftWidget==null) {
      ((SplitPanel)peer).setLeftWidget(null);
    } else {
      ((SplitPanel)peer).setLeftWidget((Widget)((WidgetClientImpl)leftWidget).peer);
    }
  }

  public Widget getTopWidget() {
    return getLeftWidget();
  }

  public void setTopWidget(Widget leftWidget) {
    setLeftWidget(leftWidget);
  }

  public Widget getRightWidget() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setRightWidget(Widget rightWidget) {
    if (rightWidget==null) {
      ((SplitPanel)peer).setRightWidget(null);
    } else {
      ((SplitPanel)peer).setRightWidget((Widget)((WidgetClientImpl)rightWidget).peer);
    }
  }

  public Widget getBottomWidget() {
    return getRightWidget();
  }

  public void setBottomWidget(Widget rightWidget) {
    setRightWidget(rightWidget);
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      case orientationId:
        setOrientation(message.readInt());
        break;
      case dividerLocationId:
        setDividerLocation(message.readFloat());
        break;
      case dividerSizeId:
        setDividerSize(message.readInt());
        break;
      case resizeWeightId:
        setResizeWeight(message.readFloat());
        break;
      case expandableId:
        setExpandable(message.readBoolean());
        break;
      case leftWidgetId:
        setLeftWidget((Widget)objectRegistry.findObject(message.readObjectId()));
        break;
      case rightWidgetId:
        setRightWidget((Widget)objectRegistry.findObject(message.readObjectId()));
        break;
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }
}
