/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/WidgetClientImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:57:48
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.ImplementationException;
  import armidale.api.context.clientserver.*;
  import armidale.api.gui.Size;
  import armidale.api.gui.Widget;

public abstract class WidgetClientImpl extends ComponentClientImpl implements WidgetClientServerIds {

  // constructor
  //
  public WidgetClientImpl(ClientContext context, Widget peer) {
    super(context, peer);
  }

  // attribute set/get/is methods
  //

  public void setPreferredSize(Size preferredSize) {
    ((Widget)peer).setPreferredSize(preferredSize);
  }

  public void setMinimumSize(Size minimumSize) {
    ((Widget)peer).setMinimumSize(minimumSize);
  }

  public void setMaximumSize(Size maximumSize) {
    ((Widget)peer).setMaximumSize(maximumSize);
  }

  public float getAlignmentX() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setAlignmentX(float alignmentX) {
    ((Widget)peer).setAlignmentX(alignmentX);
  }

  public float getAlignmentY() {
    throw new ImplementationException("attribute get/is methods are not supported in client context");
  }

  public void setAlignmentY(float alignmentY) {
    ((Widget)peer).setAlignmentY(alignmentY);
  }

  // other methods
  //

  public void setSize(Size size) {
    ((Widget)peer).setSize(size);
  }

  public void handleSetAttribute(int attributeId, Message message) {
    int index;
    int first;
    int count;

    switch (attributeId) {
      case preferredSizeId:
        setPreferredSize(message.readSize());
        break;
      case minimumSizeId:
        setMinimumSize(message.readSize());
        break;
      case maximumSizeId:
        setMaximumSize(message.readSize());
        break;
      case alignmentXId:
        setAlignmentX(message.readFloat());
        break;
      case alignmentYId:
        setAlignmentY(message.readFloat());
        break;
      default:
        super.handleSetAttribute(attributeId, message);
    }
  }

  public void handleMethodCall(int methodId, Message message) {

    // method parameter values
    //
    Size setSizeSize;

    switch (methodId) {
      case setSizeSizeId:
        setSizeSize = message.readSize();
        setSize(setSizeSize);
        break;
      default:
        super.handleMethodCall(methodId, message);
    }
  }
}
