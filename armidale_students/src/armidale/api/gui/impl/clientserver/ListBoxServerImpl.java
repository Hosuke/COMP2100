/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/clientserver/ListBoxServerImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:13
 *
 */

package armidale.api.gui.impl.clientserver;

  import armidale.api.context.clientserver.*;
  import armidale.api.gui.ListBoxCallback;
  import armidale.api.gui.ListBoxCallbackList;
  import armidale.api.gui.ListBoxFactory;
  import armidale.api.gui.ListData;
  import java.io.IOException;
  import java.util.LinkedList;

public class ListBoxServerImpl extends WidgetServerImpl implements ListBoxClientServerIds {

  // readable attributes
  //
  protected ListData listData;

  // Callback object
  //

  protected ListBoxCallbackList listBoxCallbackList = new ListBoxCallbackList();

  // constructor
  //
  public ListBoxServerImpl(ServerContext context) {
    super(context);
  }

  // Class ID
  //
  public int getClassId() {
    return ListBoxFactory.CLASS_ID;
  }

  // attribute set/get/is methods
  //

  public ListData getListData() {
    return listData;
  }

  public void setListData(ListData listData) {
    this.listData = listData;
    Message msg = new SetAttributeMessage(this.getId(), listDataId);
    msg.writeObjectId((MessagingObject)listData);
    transport.writeMessage(msg);
  }

  // Callback
  //

  public void addListBoxCallback(ListBoxCallback callback) {
    Message msg;
    listBoxCallbackList.add(callback);
    if (listBoxCallbackList.size() == 1) {
      msg = new EnableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeListBoxCallback(ListBoxCallback callback) {
    Message msg;
    listBoxCallbackList.remove(callback);
    if (listBoxCallbackList.size() == 0) {
      msg = new DisableCallbacksMessage(this.getId());
      transport.writeMessage(msg);
    }
  }

  public void removeAllListBoxCallbacks() {
    Message msg;
    listBoxCallbackList.clear();
    msg = new DisableCallbacksMessage(this.getId());
    transport.writeMessage(msg);
  }

  public ListBoxCallbackList getListBoxCallbackList() {
    return listBoxCallbackList;
  }

  // transport
  //

  public void handleCallback(int callbackMethodId, Message message) {
    int[] itemsSelectedIndices;

    switch (callbackMethodId) {
      case listBoxItemsSelectedIntId:
        itemsSelectedIndices = new int[message.readInt()];
        for (int i=0; i < itemsSelectedIndices.length; i++) {
          itemsSelectedIndices[i] = message.readInt();
        }
        listBoxCallbackList.itemsSelected(this, itemsSelectedIndices);
        break;
    }
  }

}
