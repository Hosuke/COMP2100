/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/ComponentImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:57:45
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.Color;
  import armidale.api.gui.Component;
  import armidale.api.gui.Font;
  import armidale.api.gui.PopupMenu;
  import armidale.api.gui.constants.CursorType;
  import armidale.api.gui.impl.platform.swing.VisibleObjectImpl;
  //--ARM-- imports
import javax.swing.JComponent;
import javax.swing.JPopupMenu;
import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
  //--ARM-- imports

public abstract class ComponentImpl extends VisibleObjectImpl implements Component {

  //--ARM-- declarations
  PopupMenu  popupMenu  = null;
  JPopupMenu jPopupMenu = null;
  int        cursorType;
  //--ARM-- declarations

  public ComponentImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setEnabled(DEFAULT_ENABLED);
    setToolTip(DEFAULT_TOOLTIP);
    setFont(DEFAULT_FONT);
    setForegroundColor(DEFAULT_FOREGROUNDCOLOR);
    setBackgroundColor(DEFAULT_BACKGROUNDCOLOR);
    setCursorType(DEFAULT_CURSORTYPE);
    setVisible(DEFAULT_COMPONENT_VISIBLE);
    //--ARM-- constructor() - end
    ((JComponent)peer).addMouseListener
        ( new MouseAdapter() {
          public void mousePressed(MouseEvent e) {
            handlePopup(e);
          }
          public void mouseReleased(MouseEvent e) {
            handlePopup(e);
          }
          private void handlePopup(MouseEvent e) {
            if (popupMenu != null && e.isPopupTrigger()) {
              jPopupMenu.show(e.getComponent(), e.getX(), e.getY());
            }
          }
        });
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    //--ARM-- setPeer()
  }

  // set/get/is methods
  //

  public boolean isEnabled() {
    //--ARM-- public boolean isEnabled()
    return ((JComponent) peer).isEnabled();
    //--ARM-- public boolean isEnabled()
  }

  public void setEnabled(boolean enabled) {
    //--ARM-- public void setEnabled(boolean enabled)
    ((JComponent) peer).setEnabled(enabled);
    //--ARM-- public void setEnabled(boolean enabled)
  }

  public String getToolTip() {
    //--ARM-- public String getToolTip()
    return ((JComponent) peer).getToolTipText();
    //--ARM-- public String getToolTip()
  }

  public void setToolTip(String toolTip) {
    //--ARM-- public void setToolTip(String toolTip)
    ((JComponent) peer).setToolTipText(toolTip);
    //--ARM-- public void setToolTip(String toolTip)
  }

  public PopupMenu getPopupMenu() {
    //--ARM-- public PopupMenu getPopupMenu()
    return popupMenu;
    //--ARM-- public PopupMenu getPopupMenu()
  }

  public void setPopupMenu(PopupMenu popupMenu) {
    //--ARM-- public void setPopupMenu(PopupMenu popupMenu)
    this.popupMenu = popupMenu;
    jPopupMenu = (JPopupMenu)((PopupMenuImpl)popupMenu).peer;
    //--ARM-- public void setPopupMenu(PopupMenu popupMenu)
  }

  public Font getFont() {
    //--ARM-- public Font getFont()
    return Conversions.font(((JComponent) peer).getFont());
    //--ARM-- public Font getFont()
  }

  public void setFont(Font font) {
    //--ARM-- public void setFont(Font font)
    ((JComponent) peer).setFont(Conversions.awtFont(font));
    //--ARM-- public void setFont(Font font)
  }

  public Color getForegroundColor() {
    //--ARM-- public Color getForegroundColor()
    return Conversions.color(((JComponent) peer).getForeground());
    //--ARM-- public Color getForegroundColor()
  }

  public void setForegroundColor(Color foregroundColor) {
    //--ARM-- public void setForegroundColor(Color foregroundColor)
    ((JComponent) peer).setForeground(Conversions.awtColor(foregroundColor));
    //--ARM-- public void setForegroundColor(Color foregroundColor)
  }

  public Color getBackgroundColor() {
    //--ARM-- public Color getBackgroundColor()
    return Conversions.color(((JComponent) peer).getForeground());
    //--ARM-- public Color getBackgroundColor()
  }

  public void setBackgroundColor(Color backgroundColor) {
    //--ARM-- public void setBackgroundColor(Color backgroundColor)
    ((JComponent) peer).setBackground(Conversions.awtColor(backgroundColor));
    //--ARM-- public void setBackgroundColor(Color backgroundColor)
  }

  public int getCursorType() {
    //--ARM-- public int getCursorType()
    return cursorType;
    //--ARM-- public int getCursorType()
  }

  public void setCursorType(int cursorType) {
    //--ARM-- public void setCursorType(int cursorType)
    this.cursorType = cursorType;
    switch (cursorType) {
      case CursorType.DEFAULT_CURSOR:
        ((JComponent) peer).setCursor(new Cursor(Cursor.DEFAULT_CURSOR));   
        break;
      case CursorType.CROSSHAIR_CURSOR:
        ((JComponent) peer).setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));   
        break;
      case CursorType.HAND_CURSOR:
        ((JComponent) peer).setCursor(new Cursor(Cursor.HAND_CURSOR));   
        break;
      case CursorType.MOVE_CURSOR:
        ((JComponent) peer).setCursor(new Cursor(Cursor.MOVE_CURSOR));   
        break;
      case CursorType.TEXT_CURSOR:
        ((JComponent) peer).setCursor(new Cursor(Cursor.TEXT_CURSOR));   
        break;
      case CursorType.WAIT_CURSOR:
        ((JComponent) peer).setCursor(new Cursor(Cursor.WAIT_CURSOR));   
        break;
    }
    //--ARM-- public void setCursorType(int cursorType)
  }
}
