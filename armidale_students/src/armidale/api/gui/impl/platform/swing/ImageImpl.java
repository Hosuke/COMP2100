/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/ImageImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:57:42
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.Image;
  import armidale.api.gui.ImageCallback;
  import armidale.api.gui.ImageCallbackList;
  import armidale.api.gui.Size;
  import armidale.api.impl.platform.swing.ArmidaleObjectImpl;
  import armidale.api.io.File;
  import armidale.api.structures.ByteArray;
  import java.util.LinkedList;
  //--ARM-- imports
  import javax.swing.*;
  import armidale.api.*;
  import armidale.api.context.clientserver.*;
  import armidale.api.io.Debug;
  //--ARM-- imports

public class ImageImpl extends ArmidaleObjectImpl implements Image {

  //--ARM-- declarations
  private File   file = null;
  private String description = "";
  private String name = "";
  private Size   size;
  
  private Debug debug = new Debug();

  private static final ImageIcon loadingImage 
    = new ImageIcon(Environment.armidaleFileSystemPath() + java.io.File.separator + "images/Loading.gif");
  private static final ImageIcon notFoundImage
    = new ImageIcon(Environment.armidaleFileSystemPath() + java.io.File.separator + "images/NotFound.gif");
  
  public static final int CREATED   = 0; // wait cursor
  public static final int LOADED    = 2; // default or click cusror
  public static final int NOT_FOUND = 3; // default or click cursor
  
  private int state = CREATED;
  
  public int getState() {
    return state;
  }
    
  //--ARM-- declarations

  // Callback object
  //

  protected ImageCallbackList imageCallbackList = new ImageCallbackList();

  public ImageImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setDescription(DEFAULT_DESCRIPTION);
    //--ARM-- constructor() - end
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = loadingImage;
    //--ARM-- setPeer()
  }

  // Callbacks
  //

  public void addImageCallback(ImageCallback callback) {
    imageCallbackList.add(callback);
    //--ARM-- public void addImageCallback(ImageCallback callback)
    //--ARM-- public void addImageCallback(ImageCallback callback)
  }

  public void removeImageCallback(ImageCallback callback) {
    imageCallbackList.remove(callback);
    //--ARM-- public void removeImageCallback(ImageCallback callback)
    //--ARM-- public void removeImageCallback(ImageCallback callback)
  }

  public void removeAllImageCallbacks() {
    imageCallbackList.clear();
    //--ARM-- public void removeAllImageCallbacks()
    //--ARM-- public void removeAllImageCallbacks()
  }

  public ImageCallbackList getImageCallbackList() {
    //--ARM-- public ImageCallbackList getImageCallbackList()
    //--ARM-- public ImageCallbackList getImageCallbackList()
    return imageCallbackList;
  }

  // set/get/is methods
  //
  public void setImageData(ByteArray imageData) {
    //--ARM-- public void setImageData(ByteArray imageData)
    debug.message("swing.ImageImpl", "setting image data for image '" + getDescription() + "'", Debug.COURSEST);
    ImageIcon imageIcon;
    peer = new ImageIcon(imageData.getBytes(), getDescription());
    if (size != null) {
      imageIcon = (ImageIcon)peer;
      ((ImageIcon)peer).setImage(imageIcon.getImage().getScaledInstance(size.getWidth(), size.getHeight(), java.awt.Image.SCALE_DEFAULT));
    }
    state = LOADED;
    imageCallbackList.imageChanged(this);
    //--ARM-- public void setImageData(ByteArray imageData)
  }

  public Size getSize() {
    //--ARM-- public Size getSize()
    return size;
    //--ARM-- public Size getSize()
  }

  public void setSize(Size size) {
    //--ARM-- public void setSize(Size size)
    this.size = size;
    ImageIcon imageIcon;
    if (size!=null) {
      if (peer != null) {
        imageIcon = (ImageIcon)peer;
        ((ImageIcon)peer).setImage(imageIcon.getImage().getScaledInstance(size.getWidth(), size.getHeight(), java.awt.Image.SCALE_DEFAULT));
        imageCallbackList.imageChanged(this);
      }
    }
    //--ARM-- public void setSize(Size size)
  }
  public void setFile(File file) {
    //--ARM-- public void setFile(File file)
    this.file = file;
    try {
      setImageData(file.readByteArray());
    } catch (Throwable t) {
      peer = notFoundImage;
      state = NOT_FOUND;
      imageCallbackList.imageChanged(this);
    }
    //--ARM-- public void setFile(File file)
  }

  public String getDescription() {
    //--ARM-- public String getDescription()
    return description;
    //--ARM-- public String getDescription()
  }

  public void setDescription(String description) {
    //--ARM-- public void setDescription(String description)
    this.description = description;
    ImageIcon imageIcon = (ImageIcon)peer;
    if (imageIcon != null)
       imageIcon.setDescription(description);
    //--ARM-- public void setDescription(String description)
  }
}
