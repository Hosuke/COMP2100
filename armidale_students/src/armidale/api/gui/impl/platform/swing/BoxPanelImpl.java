/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/BoxPanelImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:08
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.BoxPanel;
  import armidale.api.gui.Size;
  import armidale.api.gui.Widget;
  import armidale.api.gui.constants.Orientation;
  import armidale.api.gui.impl.platform.swing.PanelImpl;
  //--ARM-- imports
  import java.awt.Dimension;
  import javax.swing.BoxLayout;
  import javax.swing.JPanel;
  import javax.swing.JComponent;
  //--ARM-- imports

public class BoxPanelImpl extends PanelImpl implements BoxPanel {

  //--ARM-- declarations
  private int orientation;

  private static class FillComponent extends JComponent {
    public FillComponent(Dimension min, Dimension pref, Dimension max) {
      setPreferredSize(pref);
      setMaximumSize(max);
      setMinimumSize(min);
    }
  }
  //--ARM-- declarations

  public BoxPanelImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setOrientation(DEFAULT_ORIENTATION);
    //--ARM-- constructor() - end
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = new JPanel();
    //--ARM-- setPeer()
  }

  // set/get/is methods
  //

  public int getOrientation() {
    //--ARM-- public int getOrientation()
    return orientation;
    //--ARM-- public int getOrientation()
  }

  public void setOrientation(int orientation) {
    //--ARM-- public void setOrientation(int orientation)
    this.orientation = orientation;
    if (orientation == VERTICAL)
      ((JPanel)peer).setLayout(new BoxLayout((JPanel)peer, BoxLayout.Y_AXIS));
    else
      ((JPanel)peer).setLayout(new BoxLayout((JPanel)peer, BoxLayout.X_AXIS));
      
    //--ARM-- public void setOrientation(int orientation)
  }

  // other methods
  //

  public void addHorizontalSpring() {
    //--ARM-- public void addHorizontalSpring()
    ((JPanel)peer).add
      (new FillComponent
        (new Dimension(0,0), new Dimension(0,0), new Dimension(Short.MAX_VALUE, 0)));
    //--ARM-- public void addHorizontalSpring()
  }


  public void addHorizontalStrut(int width) {
    //--ARM-- public void addHorizontalStrut(int width)
    ((JPanel)peer).add
      (new FillComponent
        (new Dimension(width,0), new Dimension(width,0), new Dimension(width,Short.MAX_VALUE)));
    //--ARM-- public void addHorizontalStrut(int width)
  }


  public void addVerticalSpring() {
    //--ARM-- public void addVerticalSpring()
    ((JPanel)peer).add
      (new FillComponent
        (new Dimension(0,0), new Dimension(0,0), new Dimension(0,Short.MAX_VALUE)));
    //--ARM-- public void addVerticalSpring()
  }


  public void addVerticalStrut(int height) {
    //--ARM-- public void addVerticalStrut(int height)
    ((JPanel)peer).add
      (new FillComponent
        (new Dimension(0,height), new Dimension(0,height), new Dimension(Short.MAX_VALUE, height)));
    //--ARM-- public void addVerticalStrut(int height)
  }


  public void addRigidArea(Size size) {
    //--ARM-- public void addRigidArea(Size size)
    Dimension d = Conversions.awtDimension(size);
    ((JPanel)peer).add(new FillComponent(d, d, d));
    //--ARM-- public void addRigidArea(Size size)
  }


  public void addWidget(Widget widget) {
    //--ARM-- public void addWidget(Widget widget)
    if (widget != null) { 
      ((JPanel)peer).add((JComponent)((WidgetImpl)widget).peer);
    }
    //--ARM-- public void addWidget(Widget widget)
  }


  public void removeWidget(Widget widget) {
    //--ARM-- public void removeWidget(Widget widget)
    JComponent theComponent = (JComponent) ((WidgetImpl)widget).peer;
    ((JPanel)peer).remove(theComponent);
    //--ARM-- public void removeWidget(Widget widget)
  }


  public void removeAllWidgets() {
    //--ARM-- public void removeAllWidgets()
    ((JPanel)peer).removeAll();
    //--ARM-- public void removeAllWidgets()
  }

}
