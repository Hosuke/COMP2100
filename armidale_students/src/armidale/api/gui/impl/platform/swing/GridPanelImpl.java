/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/GridPanelImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:10
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.GridPanel;
  import armidale.api.gui.GridPanelWidget;
  import armidale.api.gui.impl.platform.swing.PanelImpl;
  //--ARM-- imports
  import armidale.api.gui.constants.Compass;
  import armidale.api.gui.constants.FillMode;
  import armidale.api.gui.Insets;
  import armidale.api.gui.Widget;
  import armidale.api.impl.platform.swing.ArmidaleObjectImpl;
  import javax.swing.JPanel;
  import javax.swing.JComponent;
  import java.awt.GridBagConstraints;
  //--ARM-- imports

public class GridPanelImpl extends PanelImpl implements GridPanel {

  //--ARM-- declarations
  private int anchorEnum(int anchor) {
    switch (anchor) {
      case Compass.CENTER:
        return GridBagConstraints.CENTER;
      case Compass.NORTH_EAST:
        return GridBagConstraints.NORTHEAST;
      case Compass.EAST:
        return GridBagConstraints.EAST;
      case Compass.SOUTH_EAST:
        return GridBagConstraints.SOUTHEAST;
      case Compass.SOUTH:
        return GridBagConstraints.SOUTH;
      case Compass.SOUTH_WEST:
        return GridBagConstraints.SOUTHWEST;
      case Compass.WEST:
        return GridBagConstraints.WEST;
      case Compass.NORTH_WEST:
        return GridBagConstraints.NORTHWEST;
    }
    return GridBagConstraints.CENTER;
  }
   
  private int fillEnum(int fill) {
    switch (fill) {
      case FillMode.NONE:
        return GridBagConstraints.NONE;
      case FillMode.BOTH:
        return GridBagConstraints.BOTH;
      case FillMode.HORIZONTAL:
        return GridBagConstraints.HORIZONTAL;
      case FillMode.VERTICAL:
        return GridBagConstraints.VERTICAL;
    }
    return GridBagConstraints.NONE;
  }
   
  private java.awt.Insets javaInsets(Insets insets) {
    return new java.awt.Insets(insets.getTop(), insets.getLeft(), insets.getBottom(), insets.getRight());
  }
  //--ARM-- declarations

  public GridPanelImpl() {
    //--ARM-- constructor()
    ((JPanel)peer).setLayout(new java.awt.GridBagLayout());
    //--ARM-- constructor()
    //--ARM-- constructor() - end
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = new JPanel();
    //--ARM-- setPeer()
  }

  // other methods
  //

  public void addWidget(GridPanelWidget gridPanelWidget) {
    //--ARM-- public void addWidget(GridPanelWidget gridPanelWidget)
    GridBagConstraints constraints;
    
    if (gridPanelWidget == null)
      return;
      
    WidgetImpl widget = (WidgetImpl)gridPanelWidget.getWidget();
    
    JComponent c = (JComponent)widget.peer;
    
    if (c != null) {
      constraints = new GridBagConstraints(
                           gridPanelWidget.getGridX(),
                           gridPanelWidget.getGridY(), 
                           gridPanelWidget.getGridWidth(), 
                           gridPanelWidget.getGridHeight(),
                           gridPanelWidget.getWeightX(), 
                           gridPanelWidget.getWeightY(),
                           anchorEnum(gridPanelWidget.getAnchor()), 
                           fillEnum(gridPanelWidget.getFill()),
                           javaInsets(gridPanelWidget.getInsets()),
                           gridPanelWidget.getInternalPadX(),
                           gridPanelWidget.getInternalPadX() );
      ((JPanel)peer).add(c, constraints);
    }
    //--ARM-- public void addWidget(GridPanelWidget gridPanelWidget)
  }


  public void removeWidget(GridPanelWidget gridPanelWidget) {
    //--ARM-- public void removeWidget(GridPanelWidget gridPanelWidget)
    Widget     theWidget    = gridPanelWidget.getWidget();
    JComponent theComponent = (JComponent) ((WidgetImpl)theWidget).peer;
    ((JPanel)peer).remove(theComponent);
    //--ARM-- public void removeWidget(GridPanelWidget gridPanelWidget)
  }


  public void removeAllWidgets() {
    //--ARM-- public void removeAllWidgets()
    ((JPanel) peer).removeAll();
    //--ARM-- public void removeAllWidgets()
  }

}
