/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/ComboBoxImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:14
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.ComboBox;
  import armidale.api.gui.ComboBoxCallback;
  import armidale.api.gui.ComboBoxCallbackList;
  import armidale.api.gui.impl.platform.swing.WidgetImpl;
  import java.util.LinkedList;
  //--ARM-- imports
  import javax.swing.JComboBox;
  import java.awt.event.ActionListener;
  import java.awt.event.ActionEvent;
  //--ARM-- imports

public class ComboBoxImpl extends WidgetImpl implements ComboBox {

  //--ARM-- declarations
  //--ARM-- declarations

  // Callback object
  //

  protected ComboBoxCallbackList comboBoxCallbackList = new ComboBoxCallbackList();

  public ComboBoxImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setSelectedItem(DEFAULT_SELECTEDITEM);
    //--ARM-- constructor() - end
    ((JComboBox) peer).addActionListener(
       new ActionListener() {
         public void actionPerformed(ActionEvent event) {
           comboBoxCallbackList.indexSelected(ComboBoxImpl.this, ComboBoxImpl.this.getSelectedItem());
         }
       });
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = new JComboBox();
    //--ARM-- setPeer()
  }

  // Callbacks
  //

  public void addComboBoxCallback(ComboBoxCallback callback) {
    comboBoxCallbackList.add(callback);
    //--ARM-- public void addComboBoxCallback(ComboBoxCallback callback)
    //--ARM-- public void addComboBoxCallback(ComboBoxCallback callback)
  }

  public void removeComboBoxCallback(ComboBoxCallback callback) {
    comboBoxCallbackList.remove(callback);
    //--ARM-- public void removeComboBoxCallback(ComboBoxCallback callback)
    //--ARM-- public void removeComboBoxCallback(ComboBoxCallback callback)
  }

  public void removeAllComboBoxCallbacks() {
    comboBoxCallbackList.clear();
    //--ARM-- public void removeAllComboBoxCallbacks()
    //--ARM-- public void removeAllComboBoxCallbacks()
  }

  public ComboBoxCallbackList getComboBoxCallbackList() {
    //--ARM-- public ComboBoxCallbackList getComboBoxCallbackList()
    //--ARM-- public ComboBoxCallbackList getComboBoxCallbackList()
    return comboBoxCallbackList;
  }

  // set/get/is methods
  //
  public void setItems(String[] items) {
    //--ARM-- public void setItems(String[] items)
    ((JComboBox)peer).removeAllItems();
    for (int i=0; i<items.length; i++) {
      ((JComboBox)peer).addItem(items[i]);
    }
    //--ARM-- public void setItems(String[] items)
  }

  public int getSelectedItem() {
    //--ARM-- public int getSelectedItem()
    return ((JComboBox)peer).getSelectedIndex();
    //--ARM-- public int getSelectedItem()
  }

  public void setSelectedItem(int selectedItem) {
    //--ARM-- public void setSelectedItem(int selectedItem)
    if (selectedItem < ((JComboBox)peer).getItemCount()) {
      ((JComboBox)peer).setSelectedIndex(selectedItem);
    }
    //--ARM-- public void setSelectedItem(int selectedItem)
  }
}
