/*
 * ./armidale/api/gui/local/swing/TreeImpl.java
 *
 * Generated by armidale.utilities.makeclass.Main v0.80 on 03Feb2002 at 19:09:27
 *
 * Copyright (c) 2000-2002 Shayne R Flint. All rights reserved.
 *
 * shayne.flint@cs.anu.edu.au
 *
 */

package armidale.api.gui.local.swing;

  import armidale.api.context.*;
  import armidale.api.gui.Tree;
  import armidale.api.gui.TreeCallback;
  import armidale.api.gui.TreeCallbackList;
  import armidale.api.gui.TreeData;
  import java.util.LinkedList;
  //--ARM-- imports
  import javax.swing.JTree;
  //--ARM-- imports

public class TreeImpl extends WidgetImpl implements Tree {

  //--ARM-- declarations
  private               JTree                 theJTree;

  private               TreeData              treeData;
  private               TreeModel             model;

 
  private class Renderer implements TreeCellRenderer {

    protected  Label  pleaseWaitLabel;

    public Renderer() {
      super();
      pleaseWaitLabel = new LabelImpl();
      pleaseWaitLabel.setText("Please wait ...");
    }

    public java.awt.Component getTreeCellRendererComponent(
                                                           JTree tree,
                                                           Object value,
                                                           boolean isSelecxted,
                                                           boolean isExpanded
                                                           int     row,
                                                           boolean cellHasFocus) {

      JComponent  theWidget;
      Label       label;
      
      if (value == null) {
        theWidget = (JComponent) ((ArmidaleObjectImpl) pleaseWaitLabel).peer;
      } else {
        if (((ArmidaleObjectImpl) value).peer instanceof JComponent) {
          theWidget = (JComponent) ((ArmidaleObjectImpl) value).peer;
        } else {
          label = new LabelImpl();
          label.setText(value.toString());
          theWidget = (JComponent) ((ArmidaleObjectImpl) label).peer;
        }
      }
      theWidget.setOpaque(true);
      if (theWidget instanceof JLabel) {
        if (isSelected) {
          theWidget.setBackground(list.getSelectionBackground());
          theWidget.setForeground(list.getSelectionForeground());
        } else {
          theWidget.setBackground(list.getBackground());
          theWidget.setForeground(list.getForeground());
        }
      }
      return theWidget;
    }
  }

  private boolean isVisible(JList list, int index) {
    return    (index >= list.getFirstVisibleIndex())
           && (index <= list.getLastVisibleIndex());
  }
    
  private void requestNullItems(int first, int last) {
    int  getFirst    = 0;
    int  getLast     = -1;
    int  pageLength;
    int  lowerBound;
    int  upperBound;

//    System.out.println("ListBox: requestNullItems " + first + " to " + last);

    if ((first < 0) || (last < first)) {
      return;
    }
    if (model==null) {
//      System.out.println("ListBox: model is null");
      return;
    }
    int lastLimit = min(last, model.getSize()-1);
    for (int i = first; i <= lastLimit; i++) {
      if (model.getElementAt(i) == null) {
        getFirst = i;
        while ((i <= last) && (model.getElementAt(i) == null)) {
          getLast = i;
          i++;
        }
        if (getLast >= getFirst) {
          // now see if we can request more items upto a full page (to minimise traffic and give smoother interface to user)
          pageLength = last - first + 1;
          lowerBound = max(0, getFirst - pageLength);
          upperBound = min(model.getSize() - 1, getLast + pageLength);
//          System.out.println("ListBox: pageLength=" + pageLength + " modelSize=" + model.getSize() + "first=" + getFirst + " last=" + getLast + " lower=" + lowerBound + " upper=" + upperBound);
          while ((getFirst > lowerBound) && (model.getElementAt(getFirst) == null)) {
            getFirst--;
          }
          while ((getLast < upperBound) && (model.getElementAt(getLast) == null)) {
            getLast++;
          }
//          System.out.println("ListBox: callback.requestItems " + getFirst + " to " + getLast);
          listData.getListDataCallbackList().requestItems(listData, getFirst, getLast - getFirst + 1);
        }
      }
    }
  }


  private int min(int a, int b) {
    if (a < b) {
      return a;
    } else {
      return b;
    }
  }


  private int max(int a, int b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  }

  private class KickStart extends Thread {
    public void run() {
//      System.out.println("Kickstart");
      while (theJList.getFirstVisibleIndex()<0) {
//        System.out.println("  - sleep");
        try {
          sleep(50);
        }
        catch (Exception e) {
        }
      }
      requestNullItems(theJList.getFirstVisibleIndex(), theJList.getLastVisibleIndex());      
    }
  }

  //--ARM-- declarations

  // Callback object
  //

  protected TreeCallbackList treeCallbackList = new TreeCallbackList();

  public TreeImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    //--ARM-- constructor() - end
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    theJTree = new JTree();
    peer = new JScrollPane(theJTree);
    //--ARM-- setPeer()
  }

  // Callbacks
  //

  public void addTreeCallback(TreeCallback callback) {
    treeCallbackList.add(callback);
    //--ARM-- public void addTreeCallback(TreeCallback callback)
    //--ARM-- public void addTreeCallback(TreeCallback callback)
  }

  public void removeTreeCallback(TreeCallback callback) {
    treeCallbackList.remove(callback);
    //--ARM-- public void removeTreeCallback(TreeCallback callback)
    //--ARM-- public void removeTreeCallback(TreeCallback callback)
  }

  public void removeAllTreeCallbacks() {
    treeCallbackList.clear();
    //--ARM-- public void removeAllTreeCallbacks()
    //--ARM-- public void removeAllTreeCallbacks()
  }

  public TreeCallbackList getTreeCallbackList() {
    //--ARM-- public TreeCallbackList getTreeCallbackList()
    //--ARM-- public TreeCallbackList getTreeCallbackList()
    return treeCallbackList;
  }

  // set/get/is methods
  //

  public TreeData getTreeData() {
    //--ARM-- public TreeData getTreeData()
    return null;
    //--ARM-- public TreeData getTreeData()
  }

  public void setTreeData(TreeData treeData) {
    //--ARM-- public void setTreeData(TreeData treeData)
    //--ARM-- public void setTreeData(TreeData treeData)
  }
}
