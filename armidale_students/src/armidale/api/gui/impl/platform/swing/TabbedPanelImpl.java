/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/TabbedPanelImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:20
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.TabbedPanel;
  import armidale.api.gui.TabbedPanelCallback;
  import armidale.api.gui.TabbedPanelCallbackList;
  import armidale.api.gui.TabbedPanelWidget;
  import armidale.api.gui.constants.OrthogonalCompass;
  import armidale.api.gui.constants.TabLayout;
  import armidale.api.gui.impl.platform.swing.WidgetImpl;
  import java.util.LinkedList;
  //--ARM-- imports
  import javax.swing.JTabbedPane;
  import javax.swing.SwingConstants;
  import javax.swing.ImageIcon;
  import javax.swing.JComponent;
  import armidale.api.Environment;
  //--ARM-- imports

public class TabbedPanelImpl extends WidgetImpl implements TabbedPanel {

  //--ARM-- declarations
  private    int                       tabPlacement;
  private    int                       tabLayout;
  //--ARM-- declarations

  // Callback object
  //

  protected TabbedPanelCallbackList tabbedPanelCallbackList = new TabbedPanelCallbackList();

  public TabbedPanelImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setSelectedIndex(DEFAULT_SELECTEDINDEX);
    setTabPlacement(DEFAULT_TABPLACEMENT);
    setTabLayout(DEFAULT_TABLAYOUT);
    //--ARM-- constructor() - end
    ((JTabbedPane) peer).addChangeListener(
      new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent event) {
          tabbedPanelCallbackList.indexSelected(TabbedPanelImpl.this, ((JTabbedPane) TabbedPanelImpl.this.peer).getSelectedIndex());
        }
      });
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = new JTabbedPane();
    //--ARM-- setPeer()
  }

  // Callbacks
  //

  public void addTabbedPanelCallback(TabbedPanelCallback callback) {
    tabbedPanelCallbackList.add(callback);
    //--ARM-- public void addTabbedPanelCallback(TabbedPanelCallback callback)
    //--ARM-- public void addTabbedPanelCallback(TabbedPanelCallback callback)
  }

  public void removeTabbedPanelCallback(TabbedPanelCallback callback) {
    tabbedPanelCallbackList.remove(callback);
    //--ARM-- public void removeTabbedPanelCallback(TabbedPanelCallback callback)
    //--ARM-- public void removeTabbedPanelCallback(TabbedPanelCallback callback)
  }

  public void removeAllTabbedPanelCallbacks() {
    tabbedPanelCallbackList.clear();
    //--ARM-- public void removeAllTabbedPanelCallbacks()
    //--ARM-- public void removeAllTabbedPanelCallbacks()
  }

  public TabbedPanelCallbackList getTabbedPanelCallbackList() {
    //--ARM-- public TabbedPanelCallbackList getTabbedPanelCallbackList()
    //--ARM-- public TabbedPanelCallbackList getTabbedPanelCallbackList()
    return tabbedPanelCallbackList;
  }

  // set/get/is methods
  //
  public void setSelectedIndex(int selectedIndex) {
    //--ARM-- public void setSelectedIndex(int selectedIndex)
    if ((selectedIndex >= 0) && (selectedIndex < ((JTabbedPane) peer).getTabCount())) {
      ((JTabbedPane) peer).setSelectedIndex(selectedIndex);
    }
    //--ARM-- public void setSelectedIndex(int selectedIndex)
  }

  public int getTabPlacement() {
    //--ARM-- public int getTabPlacement()
    return tabPlacement;
    //--ARM-- public int getTabPlacement()
  }

  public void setTabPlacement(int tabPlacement) {
    //--ARM-- public void setTabPlacement(int tabPlacement)
    this.tabPlacement = tabPlacement;
    switch (tabPlacement) {
      case NORTH:
        ((JTabbedPane) peer).setTabPlacement(SwingConstants.TOP);
        break;
      case SOUTH:
        ((JTabbedPane) peer).setTabPlacement(SwingConstants.BOTTOM);
        break;
      case WEST:
        ((JTabbedPane) peer).setTabPlacement(SwingConstants.LEFT);
        break;
      case EAST:
        ((JTabbedPane) peer).setTabPlacement(SwingConstants.RIGHT);
        break;
    }
    //--ARM-- public void setTabPlacement(int tabPlacement)
  }

  public int getTabLayout() {
    //--ARM-- public int getTabLayout()
    return tabLayout;
    //--ARM-- public int getTabLayout()
  }

  public void setTabLayout(int tabLayout) {
    //--ARM-- public void setTabLayout(int tabLayout)
    this.tabLayout = tabLayout;
//JDK1.4    switch (tabLayout) {
//JDK1.4      case WRAP:
//JDK1.4        ((JTabbedPane) peer).setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);
//JDK1.4        break;
//JDK1.4      case SCROLL:
//JDK1.4        ((JTabbedPane) peer).setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
//JDK1.4        break;
//JDK1.4    }
    //--ARM-- public void setTabLayout(int tabLayout)
  }

  // other methods
  //

  public void addTab(TabbedPanelWidget tabbedPanelWidget) {
    //--ARM-- public void addTab(TabbedPanelWidget tabbedPanelWidget)
    ImageIcon   theImageIcon  = null;
    JComponent  theComponent  = null;
    WidgetImpl  widget        = (WidgetImpl) tabbedPanelWidget.getWidget();
    ImageImpl   icon          = (ImageImpl) tabbedPanelWidget.getIcon();
    String      title         = tabbedPanelWidget.getTitle();
   
    if (widget != null) {
      theComponent = (JComponent) widget.peer;
    }
    if (icon != null) {
      theImageIcon = (ImageIcon) icon.peer;
    }
  
    ((JTabbedPane) peer).addTab(title, theImageIcon, theComponent);
    //--ARM-- public void addTab(TabbedPanelWidget tabbedPanelWidget)
  }


  public void removeTab(TabbedPanelWidget tabbedPanelWidget) {
    //--ARM-- public void removeTab(TabbedPanelWidget tabbedPanelWidget)
    JComponent  theComponent  = null;
    WidgetImpl  widget        = (WidgetImpl) tabbedPanelWidget.getWidget();
   
    if (widget != null) {
      theComponent = (JComponent) widget.peer;
      ((JTabbedPane) peer).remove(theComponent);
    }
    //--ARM-- public void removeTab(TabbedPanelWidget tabbedPanelWidget)
  }


  public void removeAllTabs() {
    //--ARM-- public void removeAllTabs()
    ((JTabbedPane) peer).removeAll();
    //--ARM-- public void removeAllTabs()
  }

}
