/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/InternalFrameImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:27
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.Color;
  import armidale.api.gui.Image;
  import armidale.api.gui.InternalFrame;
  import armidale.api.gui.MenuBar;
  import armidale.api.gui.Position;
  import armidale.api.gui.Size;
  import armidale.api.gui.Widget;
  import armidale.api.gui.constants.Compass;
  import armidale.api.gui.impl.platform.swing.WindowImpl;
  //--ARM-- imports
  import javax.swing.JInternalFrame;
  import javax.swing.JComponent;
  import javax.swing.JMenuBar;
  import javax.swing.JDesktopPane;
  import javax.swing.ImageIcon;
  import java.awt.BorderLayout;
  import java.awt.Dimension;
  import javax.swing.WindowConstants;
  //--ARM-- imports

public class InternalFrameImpl extends WindowImpl implements InternalFrame {

  //--ARM-- declarations
  private WidgetImpl  statusbar;
  private MenuBarImpl menubar;
  private WidgetImpl  toolbar;
  private WidgetImpl  content;
  private ImageImpl   icon;
  private int         onCloseAction;
  
  private void redraw() {
    int  width   = ((JInternalFrame) peer).getWidth();
    int  height  = ((JInternalFrame) peer).getHeight();
    ((JInternalFrame) peer).setSize(width, height);
    ((JInternalFrame) peer).show();
  }

  private class SwingInternalFrameListener implements javax.swing.event.InternalFrameListener {
    public void internalFrameActivated(javax.swing.event.InternalFrameEvent e) {
      windowCallbackList.windowActivated(InternalFrameImpl.this);
    }

    public void internalFrameClosed(javax.swing.event.InternalFrameEvent e) {
      windowCallbackList.windowClosed(InternalFrameImpl.this);
    }

    public void internalFrameClosing(javax.swing.event.InternalFrameEvent e) {
      windowCallbackList.windowClosing(InternalFrameImpl.this);
    }

    public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent e) {
      windowCallbackList.windowDeactivated(InternalFrameImpl.this);
    }

    public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent e) {
      windowCallbackList.windowDeiconified(InternalFrameImpl.this);
    }

    public void internalFrameIconified(javax.swing.event.InternalFrameEvent e) {
      windowCallbackList.windowIconified(InternalFrameImpl.this);
    }

    public void internalFrameOpened(javax.swing.event.InternalFrameEvent e) {
      windowCallbackList.windowOpened(InternalFrameImpl.this);
    }
  }

  public void dispose() {
    ((JInternalFrame)peer).dispose();
  }
  
  //--ARM-- declarations

  public InternalFrameImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setSize(DEFAULT_SIZE);
    setPosition(DEFAULT_POSITION);
    setResizable(DEFAULT_RESIZABLE);
    setClosable(DEFAULT_CLOSABLE);
    setMaximizable(DEFAULT_MAXIMIZABLE);
    setIconifiable(DEFAULT_ICONIFIABLE);
    setTitle(DEFAULT_TITLE);
    setBackgroundColor(DEFAULT_BACKGROUNDCOLOR);
    //--ARM-- constructor() - end
    ((JInternalFrame)peer).addInternalFrameListener(new SwingInternalFrameListener());
    ((JInternalFrame)peer).setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);    
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = new JInternalFrame();
    //--ARM-- setPeer()
  }

  // set/get/is methods
  //

  public Size getSize() {
    //--ARM-- public Size getSize()
    return Conversions.size(((JInternalFrame)peer).getSize());
    //--ARM-- public Size getSize()
  }

  public void setSize(Size size) {
    //--ARM-- public void setSize(Size size)
    ((JInternalFrame) peer).setSize(Conversions.awtDimension(size));
    //--ARM-- public void setSize(Size size)
  }

  public Position getPosition() {
    //--ARM-- public Position getPosition()
    return Conversions.position(((JInternalFrame)peer).getLocation());
    //--ARM-- public Position getPosition()
  }

  public void setPosition(Position position) {
    //--ARM-- public void setPosition(Position position)
    ((JInternalFrame) peer).setLocation(position.getX(), position.getY());
    redraw();
    //--ARM-- public void setPosition(Position position)
  }

  public boolean isResizable() {
    //--ARM-- public boolean isResizable()
    return ((JInternalFrame) peer).isResizable();
    //--ARM-- public boolean isResizable()
  }

  public void setResizable(boolean resizable) {
    //--ARM-- public void setResizable(boolean resizable)
    ((JInternalFrame)peer).setResizable(resizable);
    //--ARM-- public void setResizable(boolean resizable)
  }

  public boolean isClosable() {
    //--ARM-- public boolean isClosable()
    return ((JInternalFrame) peer).isClosable();
    //--ARM-- public boolean isClosable()
  }

  public void setClosable(boolean closable) {
    //--ARM-- public void setClosable(boolean closable)
    ((JInternalFrame)peer).setClosable(closable);
    //--ARM-- public void setClosable(boolean closable)
  }

  public boolean isMaximizable() {
    //--ARM-- public boolean isMaximizable()
    return ((JInternalFrame) peer).isMaximizable();
    //--ARM-- public boolean isMaximizable()
  }

  public void setMaximizable(boolean maximizable) {
    //--ARM-- public void setMaximizable(boolean maximizable)
    ((JInternalFrame)peer).setMaximizable(maximizable);
    //--ARM-- public void setMaximizable(boolean maximizable)
  }

  public boolean isIconifiable() {
    //--ARM-- public boolean isIconifiable()
    return ((JInternalFrame) peer).isIconifiable();
    //--ARM-- public boolean isIconifiable()
  }

  public void setIconifiable(boolean iconifiable) {
    //--ARM-- public void setIconifiable(boolean iconifiable)
    ((JInternalFrame)peer).setIconifiable(iconifiable);
    //--ARM-- public void setIconifiable(boolean iconifiable)
  }

  public String getTitle() {
    //--ARM-- public String getTitle()
    return ((JInternalFrame) peer).getTitle();
    //--ARM-- public String getTitle()
  }

  public void setTitle(String title) {
    //--ARM-- public void setTitle(String title)
    ((JInternalFrame) peer).setTitle(title);
    //--ARM-- public void setTitle(String title)
  }

  public Widget getContent() {
    //--ARM-- public Widget getContent()
    return content;
    //--ARM-- public Widget getContent()
  }

  public void setContent(Widget content) {
    //--ARM-- public void setContent(Widget content)
    this.content = (WidgetImpl)content;
    if (content != null) {
      ((JInternalFrame) peer).getContentPane().add((JComponent) this.content.peer, BorderLayout.CENTER);
      redraw();
    }
    //--ARM-- public void setContent(Widget content)
  }

  public Image getIcon() {
    //--ARM-- public Image getIcon()
    return icon;
    //--ARM-- public Image getIcon()
  }

  public void setIcon(Image icon) {
    //--ARM-- public void setIcon(Image icon)
    if (icon != null) {
      this.icon = (ImageImpl)icon;
      ((JInternalFrame) peer).setFrameIcon((ImageIcon) (((ImageImpl) icon).peer));
    }
    //--ARM-- public void setIcon(Image icon)
  }

  public MenuBar getMenubar() {
    //--ARM-- public MenuBar getMenubar()
    return menubar;
    //--ARM-- public MenuBar getMenubar()
  }

  public void setMenubar(MenuBar menubar) {
    //--ARM-- public void setMenubar(MenuBar menubar)
    this.menubar = (MenuBarImpl)menubar;
    if (menubar != null) {
      ((JInternalFrame)peer).setJMenuBar((JMenuBar)this.menubar.peer);
      redraw();
    }
    //--ARM-- public void setMenubar(MenuBar menubar)
  }

  public Widget getToolbar() {
    //--ARM-- public Widget getToolbar()
    return toolbar;
    //--ARM-- public Widget getToolbar()
  }

  public void setToolbar(Widget toolbar) {
    //--ARM-- public void setToolbar(Widget toolbar)
    this.toolbar = (WidgetImpl)toolbar;
    if (toolbar != null) {
      ((JInternalFrame) peer).getContentPane().add((JComponent)this.toolbar.peer, BorderLayout.NORTH);
      redraw();
    }
    //--ARM-- public void setToolbar(Widget toolbar)
  }

  public Widget getStatusbar() {
    //--ARM-- public Widget getStatusbar()
    return statusbar;
    //--ARM-- public Widget getStatusbar()
  }

  public void setStatusbar(Widget statusbar) {
    //--ARM-- public void setStatusbar(Widget statusbar)
    this.statusbar = (WidgetImpl)statusbar;
    if (statusbar != null) {
      ((JInternalFrame) peer).getContentPane().add((JComponent)this.statusbar.peer, BorderLayout.SOUTH);
      redraw();
    }
    //--ARM-- public void setStatusbar(Widget statusbar)
  }

  public Color getBackgroundColor() {
    //--ARM-- public Color getBackgroundColor()
    return Conversions.color(((JInternalFrame) peer).getBackground());
    //--ARM-- public Color getBackgroundColor()
  }

  public void setBackgroundColor(Color backgroundColor) {
    //--ARM-- public void setBackgroundColor(Color backgroundColor)
    ((JInternalFrame) peer).setBackground(Conversions.awtColor(backgroundColor));
    //--ARM-- public void setBackgroundColor(Color backgroundColor)
  }

  // other methods
  //

  public void setAlignment(float xAlign, float yAlign) {
    //--ARM-- public void setAlignment(float xAlign, float yAlign)
    Dimension     parentSize;
    Dimension     size;
    JDesktopPane  parent      = (JDesktopPane) ((JInternalFrame) peer).getParent();
    if (parent != null) {
      parentSize = new Dimension(parent.getWidth(), parent.getHeight());
      size = ((JInternalFrame) peer).getSize();
      int  xPos  = (int) ((float) (parentSize.width - size.width) * xAlign);
      int  yPos  = (int) ((float) (parentSize.height - size.height) * yAlign);
      setPosition(new Position(xPos, yPos));
    } else {
      setPosition(DEFAULT_POSITION);
    }
    //--ARM-- public void setAlignment(float xAlign, float yAlign)
  }


  public void setAlignment(int alignment) {
    //--ARM-- public void setAlignment(int alignment)
    switch (alignment) {
      case NORTH:
        setAlignment(0.5f, 0.0f);
        break;
      case NORTH_EAST:
        setAlignment(1.0f, 0.0f);
        break;
      case EAST:
        setAlignment(1.0f, 0.5f);
        break;
      case SOUTH_EAST:
        setAlignment(1.0f, 1.0f);
        break;
      case SOUTH:
        setAlignment(0.5f, 1.0f);
        break;
      case SOUTH_WEST:
        setAlignment(0.0f, 1.0f);
        break;
      case WEST:
        setAlignment(0.0f, 0.5f);
        break;
      case NORTH_WEST:
        setAlignment(0.0f, 1.0f);
        break;
      case CENTER:
        setAlignment(0.5f, 0.5f);
        break;
    }
    //--ARM-- public void setAlignment(int alignment)
  }

}
