/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/ListDataImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:32
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.ArmidaleObject;
  import armidale.api.context.*;
  import armidale.api.gui.ListData;
  import armidale.api.gui.ListDataCallback;
  import armidale.api.gui.ListDataCallbackList;
  import armidale.api.impl.platform.swing.ArmidaleObjectImpl;
  import java.util.LinkedList;
  //--ARM-- imports
  import javax.swing.DefaultListModel;
  //--ARM-- imports

public class ListDataImpl extends ArmidaleObjectImpl implements ListData {

  //--ARM-- declarations
  //--ARM-- declarations

  // Callback object
  //

  protected ListDataCallbackList listDataCallbackList = new ListDataCallbackList();

  public ListDataImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    //--ARM-- constructor() - end
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = new DefaultListModel();
    //--ARM-- setPeer()
  }

  // Callbacks
  //

  public void addListDataCallback(ListDataCallback callback) {
    listDataCallbackList.add(callback);
    //--ARM-- public void addListDataCallback(ListDataCallback callback)
    //--ARM-- public void addListDataCallback(ListDataCallback callback)
  }

  public void removeListDataCallback(ListDataCallback callback) {
    listDataCallbackList.remove(callback);
    //--ARM-- public void removeListDataCallback(ListDataCallback callback)
    //--ARM-- public void removeListDataCallback(ListDataCallback callback)
  }

  public void removeAllListDataCallbacks() {
    listDataCallbackList.clear();
    //--ARM-- public void removeAllListDataCallbacks()
    //--ARM-- public void removeAllListDataCallbacks()
  }

  public ListDataCallbackList getListDataCallbackList() {
    //--ARM-- public ListDataCallbackList getListDataCallbackList()
    //--ARM-- public ListDataCallbackList getListDataCallbackList()
    return listDataCallbackList;
  }

  // other methods
  //

  public void setItemCount(int count) {
    //--ARM-- public void setItemCount(int count)
    ((DefaultListModel)peer).setSize(count);
    //--ARM-- public void setItemCount(int count)
  }


  public void setItem(int index, ArmidaleObject armidaleObject) {
    //--ARM-- public void setItem(int index, ArmidaleObject armidaleObject)
    ((DefaultListModel)peer).set(index, armidaleObject);  
    //--ARM-- public void setItem(int index, ArmidaleObject armidaleObject)
  }


  public void setItem(int index, int count, ArmidaleObject armidaleObject) {
    //--ARM-- public void setItem(int index, int count, ArmidaleObject armidaleObject)
    for (int i=index; i<index+count; i++) {
      ((DefaultListModel)peer).set(i, armidaleObject);
    }
    //--ARM-- public void setItem(int index, int count, ArmidaleObject armidaleObject)
  }


  public void setItems(int index, ArmidaleObject[] armidaleObjects) {
    //--ARM-- public void setItems(int index, ArmidaleObject[] armidaleObjects)
    for (int i=index; i<index+armidaleObjects.length; i++) {
      ((DefaultListModel)peer).set(i, armidaleObjects[i-index]);  
    } 
    //--ARM-- public void setItems(int index, ArmidaleObject[] armidaleObjects)
  }


  public void insertItem(int index, ArmidaleObject armidaleObject) {
    //--ARM-- public void insertItem(int index, ArmidaleObject armidaleObject)
    ((DefaultListModel)peer).add(index, armidaleObject);
    //--ARM-- public void insertItem(int index, ArmidaleObject armidaleObject)
  }


  public void insertItem(int index, int count, ArmidaleObject armidaleObject) {
    //--ARM-- public void insertItem(int index, int count, ArmidaleObject armidaleObject)
    for (int i=index; i<index+count; i++) {
      ((DefaultListModel)peer).add(i, armidaleObject);  
    }
    //--ARM-- public void insertItem(int index, int count, ArmidaleObject armidaleObject)
  }


  public void insertItems(int index, ArmidaleObject[] armidaleObjects) {
    //--ARM-- public void insertItems(int index, ArmidaleObject[] armidaleObjects)
    for (int i=0; i<armidaleObjects.length; i++) {
      ((DefaultListModel)peer).add(i+index, armidaleObjects[i]);
    }
    //--ARM-- public void insertItems(int index, ArmidaleObject[] armidaleObjects)
  }


  public void removeItem(int index) {
    //--ARM-- public void removeItem(int index)
    ((DefaultListModel)peer).removeElementAt(index);
    //--ARM-- public void removeItem(int index)
  }


  public void removeItems(int index, int count) {
    //--ARM-- public void removeItems(int index, int count)
    for (int i=0; i<count; i++) {
      removeItem(index);
    }
    //--ARM-- public void removeItems(int index, int count)
  }


  public void addItem(ArmidaleObject armidaleObject) {
    //--ARM-- public void addItem(ArmidaleObject armidaleObject)
    ((DefaultListModel)peer).addElement(armidaleObject);
    //--ARM-- public void addItem(ArmidaleObject armidaleObject)
  }


  public void removeItem(ArmidaleObject armidaleObject) {
    //--ARM-- public void removeItem(ArmidaleObject armidaleObject)
    ((DefaultListModel)peer).removeElement(armidaleObject);
    //--ARM-- public void removeItem(ArmidaleObject armidaleObject)
  }


  public void removeAllItems() {
    //--ARM-- public void removeAllItems()
    ((DefaultListModel)peer).removeAllElements();
    //--ARM-- public void removeAllItems()
  }

}
