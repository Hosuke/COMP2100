/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/LabelImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:01
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.Image;
  import armidale.api.gui.Label;
  import armidale.api.gui.constants.Compass;
  import armidale.api.gui.impl.platform.swing.ActionImpl;
  //--ARM-- imports
  import javax.swing.*;
  import javax.swing.border.*;
  import armidale.api.Environment;
  import armidale.api.io.Debug;
  import armidale.api.gui.ImageCallbackAdapter;
  import java.io.File;
  //--ARM-- imports

public class LabelImpl extends ActionImpl implements Label {

  //--ARM-- declarations
  private ImageImpl image;
  private int       textPosition;
  private int       alignment;

  private Debug debug = new Debug();
  
  private class ImageDoneCallback extends ImageCallbackAdapter {
    public void imageChanged(Image image) {
      debug.message("swing.LabelImpl", "Image got LOADED event - loading real image", Debug.COURSEST);
      ImageImpl theImage = (ImageImpl)image;
      setImage(theImage);
     }
  }
  
  private static final Border emptyBorder    = BorderFactory.createEmptyBorder(2,2,2,2);
  private static final Border etchedBorder   = BorderFactory.createEtchedBorder();
  private static final Border indentedBorder = BorderFactory.createLoweredBevelBorder();
  
  protected void setCursor() {
    if ((image != null) && (image.getState()==ImageImpl.CREATED)) {
      setCursorType(WAIT_CURSOR);
    } else { 
      super.setCursor();
    }      
  }
  
  //--ARM-- declarations

  public LabelImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setText(DEFAULT_TEXT);
    setTextPosition(DEFAULT_TEXTPOSITION);
    setAlignment(DEFAULT_ALIGNMENT);
    setImageTextGap(DEFAULT_IMAGETEXTGAP);
    //--ARM-- constructor() - end
    ((JLabel)peer).setBorder(emptyBorder);
    ((JLabel) peer).addMouseListener(
       new java.awt.event.MouseAdapter() {
         public void mouseEntered(java.awt.event.MouseEvent event) {
           if (actionCallbackList.size()>0) {
             ((JLabel)peer).setBorder(BorderFactory.createEtchedBorder());
           }
         }
         public void mouseExited(java.awt.event.MouseEvent event) {
           if (actionCallbackList.size()>0) {
             ((JLabel)peer).setBorder(emptyBorder);
           }
         }
         public void mousePressed(java.awt.event.MouseEvent event) {
           if (actionCallbackList.size()>0) {
             ((JLabel)peer).setBorder(indentedBorder);
           }
         }
         public void mouseReleased(java.awt.event.MouseEvent event) {
           if (actionCallbackList.size()>0) {
             ((JLabel)peer).setBorder(etchedBorder);
           }
         }
       });
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = new JLabel();
    //--ARM-- setPeer()
  }

  // set/get/is methods
  //

  public String getText() {
    //--ARM-- public String getText()
    return ((JLabel)peer).getText();
    //--ARM-- public String getText()
  }

  public void setText(String text) {
    //--ARM-- public void setText(String text)
    ((JLabel)peer).setText(text);
    //--ARM-- public void setText(String text)
  }

  public int getTextPosition() {
    //--ARM-- public int getTextPosition()
    return textPosition;
    //--ARM-- public int getTextPosition()
  }

  public void setTextPosition(int textPosition) {
    //--ARM-- public void setTextPosition(int textPosition)
    this.textPosition = textPosition;
    ((JLabel)peer).setVerticalTextPosition(Conversions.verticalAlignment(textPosition));
    ((JLabel)peer).setHorizontalTextPosition(Conversions.horizontalAlignment(textPosition));
    //--ARM-- public void setTextPosition(int textPosition)
  }

  public Image getImage() {
    //--ARM-- public Image getImage()
    return image;
    //--ARM-- public Image getImage()
  }

  public void setImage(Image image) {
    //--ARM-- public void setImage(Image image)
    ImageIcon theImage;
    if (image != null) {
      if (!image.equals(this.image)) {
        image.addImageCallback(new ImageDoneCallback());
      }
      theImage = (ImageIcon)((ImageImpl)image).peer;
      if (theImage != null) {
        ((JLabel)peer).setIcon(theImage);
      }
    }
    this.image = (ImageImpl)image;
    setCursor();
    //--ARM-- public void setImage(Image image)
  }

  public int getAlignment() {
    //--ARM-- public int getAlignment()
    return alignment;
    //--ARM-- public int getAlignment()
  }

  public void setAlignment(int alignment) {
    //--ARM-- public void setAlignment(int alignment)
    this.alignment = alignment;
    ((JLabel)peer).setVerticalAlignment(Conversions.verticalAlignment(alignment));
    ((JLabel)peer).setHorizontalAlignment(Conversions.horizontalAlignment(alignment));
    //--ARM-- public void setAlignment(int alignment)
  }

  public int getImageTextGap() {
    //--ARM-- public int getImageTextGap()
    return ((JLabel)peer).getIconTextGap();
    //--ARM-- public int getImageTextGap()
  }

  public void setImageTextGap(int imageTextGap) {
    //--ARM-- public void setImageTextGap(int imageTextGap)
    ((JLabel)peer).setIconTextGap(imageTextGap);
    //--ARM-- public void setImageTextGap(int imageTextGap)
  }
}
