/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/DesktopImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:02
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.Desktop;
  import armidale.api.gui.Image;
  import armidale.api.gui.InternalFrame;
  import armidale.api.gui.constants.WallpaperModes;
  import armidale.api.gui.impl.platform.swing.WidgetImpl;
  //--ARM-- imports
  import javax.swing.JDesktopPane;
  import javax.swing.JComponent;
  import javax.swing.JInternalFrame;
  //--ARM-- imports

public class DesktopImpl extends WidgetImpl implements Desktop {

  //--ARM-- declarations
  private Image wallpaper;
  private int   wallpaperMode;
  //--ARM-- declarations

  public DesktopImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setWallpaperMode(DEFAULT_WALLPAPERMODE);
    //--ARM-- constructor() - end
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = new BackgroundDesktopPane();
    //--ARM-- setPeer()
  }

  // set/get/is methods
  //

  public Image getWallpaper() {
    //--ARM-- public Image getWallpaper()
    return wallpaper;
    //--ARM-- public Image getWallpaper()
  }

  public void setWallpaper(Image wallpaper) {
    //--ARM-- public void setWallpaper(Image wallpaper)
    this.wallpaper = wallpaper;
    ((BackgroundDesktopPane)peer).setWallpaper(wallpaper);
    //--ARM-- public void setWallpaper(Image wallpaper)
  }

  public int getWallpaperMode() {
    //--ARM-- public int getWallpaperMode()
    return wallpaperMode;
    //--ARM-- public int getWallpaperMode()
  }

  public void setWallpaperMode(int wallpaperMode) {
    //--ARM-- public void setWallpaperMode(int wallpaperMode)
    this.wallpaperMode = wallpaperMode;
    ((BackgroundDesktopPane)peer).setWallpaperMode(wallpaperMode);
    //--ARM-- public void setWallpaperMode(int wallpaperMode)
  }

  // other methods
  //

  public void addInternalFrame(InternalFrame internalFrame) {
    //--ARM-- public void addInternalFrame(InternalFrame internalFrame)
    JInternalFrame theFrame;

    if (internalFrame != null) {
      theFrame = (JInternalFrame)((InternalFrameImpl)internalFrame).peer;
      ((JDesktopPane)peer).add(theFrame);
    }
    //--ARM-- public void addInternalFrame(InternalFrame internalFrame)
  }


  public void removeInternalFrame(InternalFrame internalFrame) {
    //--ARM-- public void removeInternalFrame(InternalFrame internalFrame)
    JComponent theComponent = (JComponent) ((InternalFrameImpl)internalFrame).peer;
    ((JDesktopPane)peer).remove(theComponent);
    //--ARM-- public void removeInternalFrame(InternalFrame internalFrame)
  }


  public void removeAllInternalFrames() {
    //--ARM-- public void removeAllInternalFrames()
    ((JDesktopPane)peer).removeAll();    
    //--ARM-- public void removeAllInternalFrames()
  }

}
