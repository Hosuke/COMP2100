/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/VisibleObjectImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:57:43
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.VisibleObject;
  import armidale.api.gui.VisibleObjectCallback;
  import armidale.api.gui.VisibleObjectCallbackList;
  import armidale.api.impl.platform.swing.ArmidaleObjectImpl;
  import java.util.LinkedList;
  //--ARM-- imports
  //--ARM-- imports

public abstract class VisibleObjectImpl extends ArmidaleObjectImpl implements VisibleObject {

  //--ARM-- declarations
  //--ARM-- declarations

  // Callback object
  //

  protected VisibleObjectCallbackList visibleObjectCallbackList = new VisibleObjectCallbackList();

  public VisibleObjectImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setVisible(DEFAULT_VISIBLE);
    //--ARM-- constructor() - end
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    //--ARM-- setPeer()
  }

  // Callbacks
  //

  public void addVisibleObjectCallback(VisibleObjectCallback callback) {
    visibleObjectCallbackList.add(callback);
    //--ARM-- public void addVisibleObjectCallback(VisibleObjectCallback callback)
    //--ARM-- public void addVisibleObjectCallback(VisibleObjectCallback callback)
  }

  public void removeVisibleObjectCallback(VisibleObjectCallback callback) {
    visibleObjectCallbackList.remove(callback);
    //--ARM-- public void removeVisibleObjectCallback(VisibleObjectCallback callback)
    //--ARM-- public void removeVisibleObjectCallback(VisibleObjectCallback callback)
  }

  public void removeAllVisibleObjectCallbacks() {
    visibleObjectCallbackList.clear();
    //--ARM-- public void removeAllVisibleObjectCallbacks()
    //--ARM-- public void removeAllVisibleObjectCallbacks()
  }

  public VisibleObjectCallbackList getVisibleObjectCallbackList() {
    //--ARM-- public VisibleObjectCallbackList getVisibleObjectCallbackList()
    //--ARM-- public VisibleObjectCallbackList getVisibleObjectCallbackList()
    return visibleObjectCallbackList;
  }

  // set/get/is methods
  //

  public boolean isVisible() {
    //--ARM-- public boolean isVisible()
    return ((java.awt.Component)peer).isVisible();
    //--ARM-- public boolean isVisible()
  }

  public void setVisible(boolean visible) {
    //--ARM-- public void setVisible(boolean visible)
    ((java.awt.Component)peer).setVisible(visible);
    //--ARM-- public void setVisible(boolean visible)
  }

  // other methods
  //

  public void show() {
    //--ARM-- public void show()
    setVisible(true);
    //--ARM-- public void show()
  }


  public void hide() {
    //--ARM-- public void hide()
    setVisible(false);
    //--ARM-- public void hide()
  }


  public void refresh() {
    //--ARM-- public void refresh()
    ((java.awt.Container)peer).validate();
    //--ARM-- public void refresh()
  }

}
