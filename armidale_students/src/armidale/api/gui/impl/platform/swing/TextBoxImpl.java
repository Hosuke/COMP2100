/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/TextBoxImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:24
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.TextBox;
  import armidale.api.gui.impl.platform.swing.TextImpl;
  //--ARM-- imports
  import javax.swing.JTextArea;
  //--ARM-- imports

public class TextBoxImpl extends TextImpl implements TextBox {

  //--ARM-- declarations
  //--ARM-- declarations

  public TextBoxImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setWrapEnabled(DEFAULT_WRAPENABLED);
    //--ARM-- constructor() - end
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    peer = new JTextArea();
    //--ARM-- setPeer()
  }

  // set/get/is methods
  //

  public boolean wrapEnabled() {
    //--ARM-- public boolean wrapEnabled()
    return ((JTextArea)peer).getLineWrap();
    //--ARM-- public boolean wrapEnabled()
  }

  public void setWrapEnabled(boolean wrapEnabled) {
    //--ARM-- public void setWrapEnabled(boolean wrapEnabled)
    ((JTextArea)peer).setLineWrap(wrapEnabled);
    //--ARM-- public void setWrapEnabled(boolean wrapEnabled)
  }

  // other methods
  //

  public void requestUpdate() {
    //--ARM-- public void requestUpdate()
    textCallbackList.textChanged(this, ((JTextArea)peer).getText());
    //--ARM-- public void requestUpdate()
  }

}
