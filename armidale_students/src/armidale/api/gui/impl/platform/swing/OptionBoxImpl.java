/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/OptionBoxImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:35
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.Desktop;
  import armidale.api.gui.Image;
  import armidale.api.gui.OptionBox;
  import armidale.api.gui.OptionBoxCallback;
  import armidale.api.gui.OptionBoxCallbackList;
  import armidale.api.gui.constants.OptionBoxButtonSet;
  import armidale.api.gui.constants.OptionBoxMessageType;
  import armidale.api.impl.platform.swing.ArmidaleObjectImpl;
  import java.util.LinkedList;
  //--ARM-- imports
import javax.swing.JOptionPane;
import javax.swing.JDesktopPane;
import javax.swing.ImageIcon;
import armidale.api.ArgumentException;
import armidale.api.gui.constants.OptionBoxButton;
  //--ARM-- imports

public class OptionBoxImpl extends ArmidaleObjectImpl implements OptionBox {

  //--ARM-- declarations
             String                 title;
             String                 message;
             int                    messageType;
             int                    buttonSet;
             int                    jMessageType;
             int                    jButtonSet;
             Image                  icon;
             boolean                input;

  //--ARM-- declarations

  // Callback object
  //

  protected OptionBoxCallbackList optionBoxCallbackList = new OptionBoxCallbackList();

  public OptionBoxImpl() {
    //--ARM-- constructor()
    //--ARM-- constructor()
    setTitle(DEFAULT_TITLE);
    setMessage(DEFAULT_MESSAGE);
    setMessageType(DEFAULT_MESSAGETYPE);
    setButtonSet(DEFAULT_BUTTONSET);
    setInput(DEFAULT_INPUT);
    //--ARM-- constructor() - end
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    //--ARM-- setPeer()
  }

  // Callbacks
  //

  public void addOptionBoxCallback(OptionBoxCallback callback) {
    optionBoxCallbackList.add(callback);
    //--ARM-- public void addOptionBoxCallback(OptionBoxCallback callback)
    //--ARM-- public void addOptionBoxCallback(OptionBoxCallback callback)
  }

  public void removeOptionBoxCallback(OptionBoxCallback callback) {
    optionBoxCallbackList.remove(callback);
    //--ARM-- public void removeOptionBoxCallback(OptionBoxCallback callback)
    //--ARM-- public void removeOptionBoxCallback(OptionBoxCallback callback)
  }

  public void removeAllOptionBoxCallbacks() {
    optionBoxCallbackList.clear();
    //--ARM-- public void removeAllOptionBoxCallbacks()
    //--ARM-- public void removeAllOptionBoxCallbacks()
  }

  public OptionBoxCallbackList getOptionBoxCallbackList() {
    //--ARM-- public OptionBoxCallbackList getOptionBoxCallbackList()
    //--ARM-- public OptionBoxCallbackList getOptionBoxCallbackList()
    return optionBoxCallbackList;
  }

  // set/get/is methods
  //

  public String getTitle() {
    //--ARM-- public String getTitle()
    return title;
    //--ARM-- public String getTitle()
  }

  public void setTitle(String title) {
    //--ARM-- public void setTitle(String title)
    this.title = title;
    //--ARM-- public void setTitle(String title)
  }

  public String getMessage() {
    //--ARM-- public String getMessage()
    return message;
    //--ARM-- public String getMessage()
  }

  public void setMessage(String message) {
    //--ARM-- public void setMessage(String message)
    this.message = message;
    //--ARM-- public void setMessage(String message)
  }

  public int getMessageType() {
    //--ARM-- public int getMessageType()
    return messageType;
    //--ARM-- public int getMessageType()
  }

  public void setMessageType(int messageType) {
    //--ARM-- public void setMessageType(int messageType)
    this.messageType = messageType;
    switch (messageType) {
      case OptionBoxMessageType.ERROR:
        jMessageType = JOptionPane.ERROR_MESSAGE;
        break;
      case OptionBoxMessageType.INFORMATION:
        jMessageType = JOptionPane.INFORMATION_MESSAGE;
        break;
      case OptionBoxMessageType.WARNING:
        jMessageType = JOptionPane.WARNING_MESSAGE;
        break;
      case OptionBoxMessageType.QUESTION:
        jMessageType = JOptionPane.QUESTION_MESSAGE;
        break;
      case OptionBoxMessageType.PLAIN:
        jMessageType = JOptionPane.PLAIN_MESSAGE;
        break;
      default:
        throw new ArgumentException("'" + messageType + "' is not a valid OptionBox message type");
    }
    //--ARM-- public void setMessageType(int messageType)
  }

  public int getButtonSet() {
    //--ARM-- public int getButtonSet()
    return buttonSet;
    //--ARM-- public int getButtonSet()
  }

  public void setButtonSet(int buttonSet) {
    //--ARM-- public void setButtonSet(int buttonSet)
    switch (buttonSet) {
      case OptionBoxButtonSet.DEFAULT:
        jButtonSet = JOptionPane.DEFAULT_OPTION;
        break;
      case OptionBoxButtonSet.YES_NO:
        jButtonSet = JOptionPane.YES_NO_OPTION;
        break;
      case OptionBoxButtonSet.YES_NO_CANCEL:
        jButtonSet = JOptionPane.YES_NO_CANCEL_OPTION;
        break;
      case OptionBoxButtonSet.OK_CANCEL:
        jButtonSet = JOptionPane.OK_CANCEL_OPTION;
        break;
      default:
        throw new ArgumentException("'" + buttonSet + "' is not a valid OptionBox buttonSet type");
    }
    //--ARM-- public void setButtonSet(int buttonSet)
  }

  public Image getIcon() {
    //--ARM-- public Image getIcon()
    return icon;
    //--ARM-- public Image getIcon()
  }

  public void setIcon(Image icon) {
    //--ARM-- public void setIcon(Image icon)
    this.icon = icon;
    //--ARM-- public void setIcon(Image icon)
  }

  public boolean hasInput() {
    //--ARM-- public boolean hasInput()
    return input;
    //--ARM-- public boolean hasInput()
  }

  public void setInput(boolean input) {
    //--ARM-- public void setInput(boolean input)
    this.input = input;
    //--ARM-- public void setInput(boolean input)
  }

  // other methods
  //

  public void open() {
    //--ARM-- public void open()
    int     result = -1;
    String  resultStr;

    if (input) {
      resultStr = JOptionPane.showInputDialog(null, message, title, jMessageType);
    } else {
      resultStr = "";
      if (icon == null) {
        result = JOptionPane.showConfirmDialog(null, message, title, jButtonSet, jMessageType);
      } else {
        result = JOptionPane.showConfirmDialog(null, message, title, jButtonSet, jMessageType, (ImageIcon) ((ImageImpl) icon).peer);
      }
    }
    switch (result) {
      case JOptionPane.YES_OPTION:
        result = OptionBoxButton.YES;
        break;
      case JOptionPane.NO_OPTION:
        result = OptionBoxButton.NO;
        break;
      case JOptionPane.CANCEL_OPTION:
        result = OptionBoxButton.CANCEL;
        break;
      case JOptionPane.CLOSED_OPTION:
        result = OptionBoxButton.CLOSED;
        break;
    }
    optionBoxCallbackList.optionSelected(this, result, resultStr);
    //--ARM-- public void open()
  }


  public void open(Desktop desktop) {
    //--ARM-- public void open(Desktop desktop)
    int           result     = -1;
    String        resultStr;
    JDesktopPane  jDesktop;

    jDesktop = (JDesktopPane) (((DesktopImpl) desktop).peer);

    if (input) {
      resultStr = JOptionPane.showInternalInputDialog(jDesktop, message, title, jMessageType);
    } else {
      resultStr = "";
      if (icon == null) {
        result = JOptionPane.showInternalConfirmDialog(jDesktop, message, title, jButtonSet, jMessageType);
      } else {
        result = JOptionPane.showInternalConfirmDialog(jDesktop, message, title, jButtonSet, jMessageType, (ImageIcon) ((ImageImpl) icon).peer);
      }
    }
    switch (result) {
      case JOptionPane.YES_OPTION:
        result = OptionBoxButton.YES;
        break;
      case JOptionPane.NO_OPTION:
        result = OptionBoxButton.NO;
        break;
      case JOptionPane.CANCEL_OPTION:
        result = OptionBoxButton.CANCEL;
        break;
      case JOptionPane.CLOSED_OPTION:
        result = OptionBoxButton.CLOSED;
        break;
    }
    optionBoxCallbackList.optionSelected(this, result, resultStr);
    //--ARM-- public void open(Desktop desktop)
  }

}
