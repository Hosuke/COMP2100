/*
 * Copyright (c) 2000-2002, Shayne R Flint
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ./armidale/api/gui/impl/platform/swing/ListBoxImpl.java
 * Generated by armidale.utilities.makeclass.Main armidale v0.9.5 on 10Apr2002 at 17:58:13
 *
 */

package armidale.api.gui.impl.platform.swing;

  import armidale.api.context.*;
  import armidale.api.gui.ListBox;
  import armidale.api.gui.ListBoxCallback;
  import armidale.api.gui.ListBoxCallbackList;
  import armidale.api.gui.ListData;
  import armidale.api.gui.impl.platform.swing.WidgetImpl;
  import java.util.LinkedList;
  //--ARM-- imports
import javax.swing.JList;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JScrollBar;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListModel;
import javax.swing.DefaultListModel;
import javax.swing.ListCellRenderer;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListDataEvent;
import java.awt.event.ComponentListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentAdapter;

import java.awt.event.AdjustmentListener;
import java.awt.event.AdjustmentEvent;
import java.util.LinkedList;
import javax.swing.SwingUtilities;

import armidale.api.gui.Label;
import armidale.api.impl.platform.swing.ArmidaleObjectImpl;
import armidale.api.ArmidaleObject;
  //--ARM-- imports

public class ListBoxImpl extends WidgetImpl implements ListBox {

  //--ARM-- declarations
  private               JList                theJList;

  private               ListData             listData;
  private               ListModel            model;

  private final static  int                  PAGE_LENGTH          = 20;

  private               UpdateThread         updateThread;

  private  Label  pleaseWaitLabel;
//  protected  Label  nullLabel;

  private class Renderer implements ListCellRenderer {



    public Renderer() {
      super();
    }


    public java.awt.Component getListCellRendererComponent
      ( JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

      JComponent  theWidget;
      Label       label;

      if (value == null) {
        theWidget = (JComponent) ((ArmidaleObjectImpl) pleaseWaitLabel).peer;
      } else {
        if (((ArmidaleObjectImpl) value).peer instanceof JComponent) {
          theWidget = (JComponent) ((ArmidaleObjectImpl) value).peer;
        } else {
          label = new LabelImpl();
          label.setText(value.toString());
          theWidget = (JComponent) ((ArmidaleObjectImpl) label).peer;
        }
      }
      theWidget.setOpaque(true);
      if (theWidget instanceof JLabel) {
        if (isSelected) {
          theWidget.setBackground(list.getSelectionBackground());
          theWidget.setForeground(list.getSelectionForeground());
        } else {
          theWidget.setBackground(list.getBackground());
          theWidget.setForeground(list.getForeground());
        }
      }
      return theWidget;
    }
  }


  private boolean isVisible(JList list, int index) {
    return (index >= list.getFirstVisibleIndex())
       && (index <= list.getLastVisibleIndex());
  }


  private void requestNullItems(int first, int last) {
    int  getFirst    = 0;
    int  getLast     = -1;
    int  pageLength;
    int  lowerBound;
    int  upperBound;

//    System.out.println("ListBoxImpl: requestNullItems " + first + " to " + last);

    if ((first < 0) || (last < first)) {
      return;
    }
    if (model == null) {
//      System.out.println("ListBoxImpl: model is null");
      return;
    }
    int  lastLimit   = min(last, model.getSize() - 1);
    for (int i = first; i <= lastLimit; i++) {
      if (model.getElementAt(i) == null) {
        getFirst = i;
        while ((i <= last) && (model.getElementAt(i) == null)) {
          getLast = i;
          i++;
        }
        if (getLast >= getFirst) {
          // now see if we can request more items upto a full page (to minimise traffic and give smoother interface to user)
          pageLength = last - first + 1;
          lowerBound = max(0, getFirst - pageLength);
          upperBound = min(model.getSize() - 1, getLast + pageLength);
          //System.out.println("ListBoxImpl: pageLength=" + pageLength + " modelSize=" + model.getSize() + "first=" + getFirst + " last=" + getLast + " lower=" + lowerBound + " upper=" + upperBound);
          while ((getFirst > lowerBound) && (model.getElementAt(getFirst) == null)) {
            getFirst--;
          }
          while ((getLast < upperBound) && (model.getElementAt(getLast) == null)) {
            getLast++;
          }
          //System.out.println("ListBoxImpl: callback.requestItems " + getFirst + " to " + getLast + " count=" + (getLast - getFirst + 1));
          listData.setItem(getFirst, getLast - getFirst + 1, pleaseWaitLabel);
          listData.getListDataCallbackList().requestItems(listData, getFirst, getLast - getFirst + 1);
        }
      }
    }
  }


  private int min(int a, int b) {
    if (a < b) {
      return a;
    } else {
      return b;
    }
  }


  private int max(int a, int b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  }


  private class UpdateThread extends Thread {
    public void run() {
      try {
        while (theJList.getFirstVisibleIndex() < 0) {
          sleep(50);
        }
        while (true) {
          requestNullItems(theJList.getFirstVisibleIndex(), theJList.getLastVisibleIndex());
          sleep(1000);
        }
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
  }


  //--ARM-- declarations

  // Callback object
  //

  protected ListBoxCallbackList listBoxCallbackList = new ListBoxCallbackList();

  public ListBoxImpl() {
    //--ARM-- constructor()
    pleaseWaitLabel = new LabelImpl();
    pleaseWaitLabel.setText("Please wait ...");
//    nullLabel = new LabelImpl();
//    nullLabel.setText("...");
    //--ARM-- constructor()
    //--ARM-- constructor() - end

    theJList.setCellRenderer(new Renderer());

    theJList.addListSelectionListener(
      new ListSelectionListener() {
        public void valueChanged(javax.swing.event.ListSelectionEvent event) {
          int[]             selectedIndices;
          ArmidaleObject[]  selectedObjects;
          if (!event.getValueIsAdjusting()) {
            selectedIndices = ((JList) event.getSource()).getSelectedIndices();
            listBoxCallbackList.itemsSelected(ListBoxImpl.this, selectedIndices);
          }
        }
      });

    JScrollBar  vScrollBar  = ((JScrollPane) peer).getVerticalScrollBar();

    vScrollBar.addMouseListener(
      new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent event) {
          int  pageLength;
//System.out.println("ListBoxImpl: adjustmentValueChanged");
          //System.out.println("ListBoxImpl: - calling list scrolled callback");
          requestNullItems(theJList.getFirstVisibleIndex(), theJList.getLastVisibleIndex());
          //System.out.println("ListBoxImpl: - done");
        }
      });
    //--ARM-- constructor() - end
  }

  protected void setPeer() {
    //--ARM-- setPeer()
    theJList = new JList();
    peer = new JScrollPane(theJList);
    //--ARM-- setPeer()
  }

  // Callbacks
  //

  public void addListBoxCallback(ListBoxCallback callback) {
    listBoxCallbackList.add(callback);
    //--ARM-- public void addListBoxCallback(ListBoxCallback callback)
    //--ARM-- public void addListBoxCallback(ListBoxCallback callback)
  }

  public void removeListBoxCallback(ListBoxCallback callback) {
    listBoxCallbackList.remove(callback);
    //--ARM-- public void removeListBoxCallback(ListBoxCallback callback)
    //--ARM-- public void removeListBoxCallback(ListBoxCallback callback)
  }

  public void removeAllListBoxCallbacks() {
    listBoxCallbackList.clear();
    //--ARM-- public void removeAllListBoxCallbacks()
    //--ARM-- public void removeAllListBoxCallbacks()
  }

  public ListBoxCallbackList getListBoxCallbackList() {
    //--ARM-- public ListBoxCallbackList getListBoxCallbackList()
    //--ARM-- public ListBoxCallbackList getListBoxCallbackList()
    return listBoxCallbackList;
  }

  // set/get/is methods
  //

  public ListData getListData() {
    //--ARM-- public ListData getListData()
    return listData;
    //--ARM-- public ListData getListData()
  }

  public void setListData(ListData listData) {
    //--ARM-- public void setListData(ListData listData)
    this.listData = listData;
    model = (ListModel) ((ListDataImpl) listData).peer;
    theJList.setModel(model);
//    System.out.println("ListBoxImpl: about the requestNullItems");
    updateThread = new UpdateThread();
    updateThread.start();
    //--ARM-- public void setListData(ListData listData)
  }
}
